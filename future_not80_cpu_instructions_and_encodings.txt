Note that register pairs are fixed to have their high byte stored in a
register rX and their low byte stored in another register r(X + 1) such
that X is an even number.  

Here are some example register pairs:  r0p (high byte r0, low byte r1), 
  r2p (high byte r2, low byte r3), r4p (high byte r4, low byte r5), etc.


Special register pairs:  
  1)  The program counter's two bytes are stored in the register pair
  r14p.  If there is ever an assembler for this CPU, "pc" (without
  quotes) will be an alias for "r14p" (without quotes).
  2)  The link register's two bytes are stored in the register pair r12p
  (enforced by the hardware, but only relevant to the call instruction).
  If there is ever an assembler for this CPU, "lr" (without quotes) will be
  an alias for "r12p" (without quotes).
  3)  As an ASSEMBLER CONVENTION, the stack pointer's two bytes are stored
  in the register pair r10p.  If there is ever an assembler for this
  CPU, "sp" (without quotes) will be an alias for "r10p" (without
  quotes).



Instruction encodings:

Type 1:  0ooo aaaa iiii iiii
  Encoding description:  op (o); rA (a); immediate value (i)
  Instructions:  
    Arithmetic instructions:
      addi, adci, 
      addpi (ADd 8-bit Immediate value to register Pair),
      
      subi (ASSEMBLER ALIAS for addi with the two's complement of the
      immediate value), 
      
      sbci (ASSEMBLER ALIAS for adci with the one's complement of the
      immediate value), 
      
      subpi (SuBtract 8-bit Immediate value from register Pair [NOT an
      assembler alias for addpi]),
      
      cmpi
    Copy instructions:
      cpyi (CoPY Immediate)


Type 2:  10oo oooo aaaa bbbb
  Encoding description:  op (o); rA (a); rB (b)
  Instructions:  
    Arithmetic instructions:
      add, adc, 
      addp (ADd 8-bit register to reg Pair r(bbbb/2)p [so the least
      significant bit of bbbb is ignored]), 
      
      sub, sbc, 
      subp (SuBtract 8-bit register from reg Pair r(bbbb/2)p [so the least
      significant bit of bbbb is ignored]),
      
      cmp,
      
      umul (Unsigned MULtiply rA by rB, storing results in r0p [16-bit, big
      endian]),
      smul (Signed MULtiply rA by rB, storing results in r0p [16-bit, big
      endian]),
    
    Bitwise instructions with two register operands:
      and, orr, xor, 
    
    Bitshifting (and rotating) instructions that use the value of rB as the
    number of bits to shift by:
      lsl, lsr, asr, rol, ror
    
    Bit rotating instructions that use carry as an extra bit
    (either bit 8 or bit 0) and that use the value of rB as the number of
    bits to rotate by:
      rolc, rorc
    
    Bitshifting (and rotating) instructions that do a 16-bit shift or
    rotate on the reg pair r(aaaa/2)+ [so the least significant bit of aaaa
    is ignored], using rB as the number of bits to shift by:
      lslp, lsrp, asrp, rol, rorp
    
    Bit rotating instructions that use carry as an extra bit
    (either bit 16 or bit 0) for a 16-bit rotate of the reg pair r(aaaa/2)+
    [so the least significant bit of aaaa is ignored], using rB as the
    number of bits to rotate by:
      rolpc, rorpc
    
    Copy instructions:
      cpy (CoPY from one register to another register)


Type 3 (four bytes):  110o aaao iiii iiii   jjjj jjjj 0000 0000
  Encoding description:  op (o); reg pair rAp (a); 
  high byte of 16-bit immediate value (i);
  low byte of 16-bit immediate value (j);
  Instructions
    Extended copy instructions:
      Instructions:  
        cpypi (COPY Pair Immediate, which sets the a register pair rAp to a
        16-bit value in one instruction, but in twice the number of cycles
        due to using more than two bytes [can be used a as a jump immediate
        by copying a 16-bit immediate value to the pc] [this instruction
        ONLY has an advantage over using two successive cpyi instructions
        when used to copy a 16-bit immediate value to the pc])
    Call instructions
      Instructions:  
        calli (CALL Immediate, which sets the link register to the return
        address, then sets the program counter to the destination address)


Type 4:  1110 oooo iiii iiii
  Encoding description:  op (o); immediate value (i)
    Branching instructions (note that iiii iiii is a SIGNED 8-bit integer):
      bra (branch always), bnv (branch never, a form of NOP)
      bne (branch when Z == 0), beq (branch when Z == 1), 
      bcc (branch when C == 0 [unsigned less than]), 
      bcs (branch when C == 1 [unsigned greater than or equal]),
      bls (branch when C == 0 and Z == 1 [unsigned less than or equal]),
      bhi (branch when C == 1 and Z == 0 [unsigned greater than]),
      bvc (branch when V == 0), bvs (branch when V == 1),
      bpl (branch when N == 0), bmi (branch when N == 1),


Type 5:  1111 oooo aaaa bbb0
  Encoding description:  op (o); rA (a); reg pair rBp (b);
  Instructions:  
    Load/store instructions:
      ldr (LoaD contents into Register rA from memory), 
      str (STore Register rA contents to memory),
      
      
      ldria (LoaD contents into Register rA from memory at address contained
      in reg pair rBp, then add 1 to the reg pair rBp), 
      
      stria (STore Register rA contents to memory at address contained in
      reg pair rBp, then add 1 to the reg pair rBp), 
      
      
      ldrib (add 1 to the reg pair rBp, then LoaD contents into
      Register rA from memory at address contained in reg pair rBp), 
      
      strib (add 1 to the reg pair rBp, then STore Register rA
      contents to memory at address contained in reg pair rBp), 
      
      
      ldrda (LoaD contents into Register rA from memory at address contained
      in reg pair rBp, then subtract 1 from the reg pair rBp), 
      
      strda (STore Register rA contents to memory at address contained in
      reg pair rBp, then subtract 1 from the reg pair rBp), 
      
      
      ldrdb (subtract 1 from the reg pair rBp, then LoaD contents into
      Register rA from memory at address contained in reg pair rBp), 
      
      strdb (subtract 1 from the reg pair rBp, then STore Register rA
      contents to memory at address contained in reg pair rBp)


Type 6:  1111 oooo aaa0 bbb1
  Encoding description:  op (o); reg pair rAp (a); reg pair rBp (b);
  Instructions:  
    Swap instructions:
      swp (SWap register Pair, also can be used as a combined "call",
      "jump", and "return" instruction by swapping some other register pair
      with the "pc" [r14] register pair)
    Copy instructions:
      cpyp (CoPY from reg Pair rAp to reg Pair rBp)
    Call instruction (Description:  sets the link register to the return
    address, then sets the program counter to the address contained in
    the reg pair rAp):
      call (CALL subroutine at address in reg pair rAp)
    Load/store instructions:
      ldp (LoaD 16-bit contents [big endian] into reg Pair rAp from
      memory at address contained in reg pair rBp), 
      
      stp (Store 16-bit contents [big endian] of reg Pair rAp to
      memory at address contained in reg pair rBp),
      
      
      ldpia (LoaD 16-bit contents [big endian] into reg Pair rAp from
      memory at address contained in reg pair rBp, then add 2 to the
      reg pair rBp),
      
      stpia (STore 16-bit contents [big endian] of reg Pair rAp to
      memory at address contained in reg pair rBp, then add 2 to the
      reg pair rBp),
      
      
      ldpib (Add 2 to the reg pair rBp, then LoaD 16-bit contents
      [big endian] into reg Pair rAp from memory at address contained
      in reg pair rBp),
      
      stpib (Add 2 to the reg pair rBp, then STore 16-bit contents
      [big endian] of reg Pair rAp to memory at address contained in
      reg pair rBp),
      
      
      ldpda (LoaD 16-bit contents [big endian] into reg Pair rAp from
      memory at address contained in reg pair rBp, then subtract 2
      from the reg pair rBp),
      
      stpda (STore 16-bit contents [big endian] of reg Pair rAp to
      memory at address contained in reg pair rBp, then subtract 2
      from the reg pair rBp),
      
      
      ldpdb (Add 2 to the reg pair rBp, then LoaD 16-bit contents
      [big endian] into reg Pair rAp from memory at address contained
      in reg pair rBp),
      
      stpdb (Add 2 to the reg pair rBp, then STore 16-bit contents
      [big endian] of reg Pair rAp to memory at address contained in
      reg pair rBp)



