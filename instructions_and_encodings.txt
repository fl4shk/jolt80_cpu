Note that register pairs are fixed to have their high byte stored in a
register rX and their low byte stored in another register r(X + 1) such
that X is an even number.  

Here are some example register pairs:  r0p (high byte r0, low byte r1), 
  r2p (high byte r2, low byte r3), r4p (high byte r4, low byte r5), etc.


Special register pairs:  
  1)  The program counter's two bytes are stored in the register pair
  r14p.  If there is ever an assembler for this CPU, "pc" (without
  quotes) will be an alias for "r14p" (without quotes).
  2)  The link register's two bytes are stored in the register pair r12p
  (enforced by the hardware, but only relevant to the call instruction).
  If there is ever an assembler for this CPU, "lr" (without quotes) will be
  an alias for "r12p" (without quotes).
  3)  As an ASSEMBLER CONVENTION, the stack pointer's two bytes are stored
  in the register pair r10p.  If there is ever an assembler for this
  CPU, "sp" (without quotes) will be an alias for "r10p" (without
  quotes).



Instruction encodings:

Type 1:  0ooo aaaa iiii iiii
  Encoding description:  op (o); rA (a); immediate value (i)
  Instructions:  
    Arithmetic instructions:
      addi, adci, 
      
      subi (ASSEMBLER ALIAS for addi with the two's complement of the
      immediate value), 
      
      sbci (ASSEMBLER ALIAS for adci with the one's complement of the
      immediate value), 
      
      cmpi
    Copy instructions:
      cpyi (CoPY Immediate)

Type 2:  10oo oooo aaaa bbbb
  Encoding description:  op (o); rA (a); rB (b)
  Instructions:  
    Arithmetic instructions:
      add, adc, 
      
      sub, sbc, 
      
      cmp
    Bitwise instructions with two register operands:
      and, orr, xor,
    Bitshifting (and rotating) instructions that use the value of rB as the
    number of bits to shift by:
      lsl, lsr, asr, rol, ror
    Bit rotating instructions that use carry as an extra bit
    (either bit 8 or bit 0) and that use the value of rB as the number of
    bits to rotate by:
      rolc, rorc
    Copy instructions:
      cpy (CoPY from one register to another register)

Type 3:  111o oooo aaa0 bbb0
  Encoding description:  op (o); reg pair rAp (a); reg pair rBp (b);
  Instructions:  
    Swap instructions:
      swp (SWap register Pair, also can be used as a combined "call",
      "jump", and "return" instruction by swapping some other register pair
      with the "pc" [r14p] register pair)
    Copy instructions:
      cpyp (CoPY from reg Pair rAp to reg Pair rBp [can also be
      used as a "jump" instruction])
    Call instruction (Description:  sets the link register to the return
    address, then sets the program counter to the address contained in
    the reg pair rAp):
      call (CALL subroutine at address in reg pair rAp)

Type 4:  1110 oooo aaaa bbb0
  Encoding description:  op (o); rA (a); reg pair rBp (b);
  Instructions:  
    Load/store instructions:
      ldr (LoaD contents into Register rA from memory), 
      str (STore Register rA contents to memory),

Type 5:  1111 oooo iiii iiii
  Encoding description:  op (o); immediate value (i)
    Branching instructions (note that iiii iiii is a SIGNED 8-bit integer):
      bra (branch always), bnv (branch never, a form of NOP)
      bne (branch when Z == 0), beq (branch when Z == 1), 
      bcc (branch when C == 0 [unsigned less than]), 
      bcs (branch when C == 1 [unsigned greater than or equal]),
      bls (branch when C == 0 and Z == 1 [unsigned less than or equal]),
      bhi (branch when C == 1 and Z == 0 [unsigned greater than])


