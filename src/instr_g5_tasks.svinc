// This file is part of Jolt80 CPU.
// 
// Copyright 2016-2017 by Andrew Clark (FL4SHK).
// 
// Jolt80 CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Jolt80 CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Jolt80 CPU.  If not, see <http://www.gnu.org/licenses/>.

`ifndef instr_g5_tasks_svinc
`define instr_g5_tasks_svinc

`define get_final_ig5_reg_a cpu_regs[final_ig5_ra_index]
`define get_final_ig5_rpair_b `make_reg_pair_w_pi(final_ig5_rbp_index)
`define get_final_ig5_rpair_a `make_reg_pair_w_pi(final_ig5_ra_index)

task debug_disp_init_instr_from_grp_5;
	//$display( "Group 5:  %h\t\t%h %h\t\t%h", ig5_opcode, ig5_ra_index, 
	//	ig5_rbp_index, instr_in_lo );
	$display( "Group 5:  %h\t\t%h %h\t\t%h", ig5_opcode, ig5_ra_index, 
		ig5_rbp_index, ig5_ra_index_is_for_pair );
endtask

task debug_disp_final_instr_from_grp_5;
	//$display( "Group 5:  %h\t\t%h %h\t\t%h", final_ig5_opcode, 
	//	final_ig5_ra_index, final_ig5_rbp_index, instr_in_lo );
	$display( "Group 5:  %h\t\t%h %h\t\t%h", final_ig5_opcode, 
		final_ig5_ra_index, final_ig5_rbp_index,
		final_ig5_ra_index_is_for_pair );
endtask


task disassemble_grp_5_instr;
	
	// Extended copy instructions:
	
	// (COPY Pair Immediate, which sets the a register pair rAp to a
	// 16-bit value in one instruction, but in twice the number of
	// cycles due to using more than two bytes [can be used a as a jump
	// immediate by copying a 16-bit immediate value to the pc] [this
	// instruction ONLY has an advantage over using two successive cpyi
	// instructions when used to copy a 16-bit immediate value to the
	// pc])
	//$display( "final_ig5_opcode:  %d", final_ig5_opcode );
	if ( final_ig5_opcode == pkg_instr_dec::instr_g5_op_cpypi )
	begin
		$display( "cpypi r%dp, $%h", 
			`make_reg_ind_from_pi(final_ig5_ra_index), instr_in_lo );
	end
	
	// Call instructions
	
	// (CALL Immediate, which sets the link register to the return
	// address, then sets the program counter to the destination
	// address)
	else if ( final_ig5_opcode == pkg_instr_dec::instr_g5_op_calli )
	begin
		$display( "calli $%h", instr_in_lo );
	end
	
	// Indexed Load/store instructions:
	
	// (Load 8-bit value from memory at address [rBp + 16-bit Immediate
	// value] into rA)
	else if ( final_ig5_opcode == pkg_instr_dec::instr_g5_op_ldrxi )
	begin
		$display( "ldrxi r%d, r%dp, $%h", final_ig5_ra_index,
			`make_reg_ind_from_pi(final_ig5_rbp_index), instr_in_lo );
	end
	
	// (Store rA to memory at address [rBp + 16-bit Immediate value])
	else if ( final_ig5_opcode == pkg_instr_dec::instr_g5_op_strxi )
	begin
		$display( "strxi r%d, r%dp, $%h", final_ig5_ra_index,
			`make_reg_ind_from_pi(final_ig5_rbp_index), instr_in_lo );
	end
	
	else
	begin
		$display("Unknown group 5 instruction!");
	end
	
endtask


//task update_ipc_pc_for_grp_5_instr;
//task update_grp_5_instr_is_bc;
task update_instr_is_bc_for_grp_5_instr;
	
	
	if ( pkg_instr_dec::ig5_get_instr_definitely_changes_pc
		(final_ig5_opcode) )
	begin
		//non_bc_instr_possibly_changes_pc = 1;
		instr_is_branch_or_call = 1;
	end
	
	//else if (final_ig5_pc_contains_ra)
	//begin
	//	if ( pkg_instr_dec::ig5_get_ra_instr_can_change_pc
	//		(final_ig5_opcode) )
	//	begin
	//		non_bc_instr_possibly_changes_pc = 1;
	//	end
	//end
	//
	//else if (final_ig5_rap_is_pc)
	//begin
	//	if ( pkg_instr_dec::ig5_get_rap_instr_can_change_pc
	//		(final_ig5_opcode) )
	//	begin
	//		non_bc_instr_possibly_changes_pc = 1;
	//	end
	//end
	//
	//// Don't need to check this
	////else if (final_ig5_rbp_is_pc)
	////begin
	////	
	////end
	
endtask

task back_up_ig5_instr_contents;
	{ final_ig5_opcode, final_ig5_ra_index, final_ig5_rbp_index,
		final_ig5_ra_index_is_for_pair }
		<= { ig5_opcode, ig5_ra_index, ig5_rbp_index,
		ig5_ra_index_is_for_pair };
endtask




task update_extra_ig5_pc_stuff;
	final_ig5_pc_contains_ra 
		<= `wire_rhs_pc_indices_contain_reg_index(ig5_ra_index);
	final_ig5_rap_is_pc <= ( ig5_ra_index_is_for_pair
		&& `wire_rhs_rp_index_is_pc_index(ig5_ra_index) );
	final_ig5_rbp_is_pc <= `wire_rhs_rp_index_is_pc_index(ig5_rbp_index);
endtask


task prep_alu_instr_grp_5_generic;
	input [`instr_g5_op_msb_pos:0] opcode;
	input [`cpu_reg_arr_msb_pos:0] ra_index;
	input [`cpu_reg_arr_msb_pos:0] rbp_index;
	input ra_index_is_for_pair;
	input [`cpu_reg_arr_msb_pos:0] imm_value_16;
	
	case (opcode)
		pkg_instr_dec::instr_g5_op_ldrxi:
		begin
			//do_alu_op_addp_no_flags
			//	( `make_reg_pair_w_pi(rbp_index),
			//	imm_value_16[ `cpu_imm_value_16_msb_pos
			//	: `cpu_imm_value_8_width ],
			//	imm_value_16[`cpu_imm_value_8_msb_pos:0] );
			do_alu_op_addp_no_flags( rbp_index,
				imm_value_16[ `cpu_imm_value_16_msb_pos
				: `cpu_imm_value_8_width ],
				imm_value_16[`cpu_imm_value_8_msb_pos:0] );
		end
		
		pkg_instr_dec::instr_g5_op_strxi:
		begin
			//do_alu_op_addp_no_flags
			//	( `make_reg_pair_w_pi(rbp_index),
			//	imm_value_16[ `cpu_imm_value_16_msb_pos
			//	: `cpu_imm_value_8_width ],
			//	imm_value_16[`cpu_imm_value_8_msb_pos:0] );
			do_alu_op_addp_no_flags( rbp_index,
				imm_value_16[ `cpu_imm_value_16_msb_pos
				: `cpu_imm_value_8_width ],
				imm_value_16[`cpu_imm_value_8_msb_pos:0] );
		end
		
		default:
		begin
			alu_was_used <= 0;
		end
		
	endcase
	
endtask


task start_exec_instr_from_grp_5;
	//$display( "start_exec_instr_from_grp_5 is unfinished\t\t%h\t\t%h", 
	//	final_ig5_opcode, non_bc_instr_possibly_changes_pc );
	//$display( "group 5 instr:\t\t%h\t\t%h", final_ig5_opcode, 
	//	non_bc_instr_possibly_changes_pc );
	
	disassemble_grp_5_instr();
	
	//if ( final_ig5_opcode == pkg_instr_dec::instr_g5_op_cpypi )
	//begin
	//	//$display( "%h %h %h %h", final_ig5_other_rap_index,
	//	//	final_ig5_rap_is_pc, instr_in_lo,
	//	//	non_bc_instr_possibly_changes_pc );
	//	$display( "%h %h", final_ig5_ra_index, instr_in_lo );
	//	`make_reg_pair_w_pi(final_ig5_ra_index) <= instr_in_lo;
	//end
	
	case (final_ig5_opcode)
		
		// Extended copy instructions:
		
		// (COPY Pair Immediate, which sets the a register pair rAp to a
		// 16-bit value in one instruction, but in twice the number of
		// cycles due to using more than two bytes [can be used a as a jump
		// immediate by copying a 16-bit immediate value to the pc] [this
		// instruction ONLY has an advantage over using two successive cpyi
		// instructions when used to copy a 16-bit immediate value to the
		// pc])
		pkg_instr_dec::instr_g5_op_cpypi:
		begin
			//`get_final_ig5_rpair_a <= instr_in_lo;
			set_reg_pair_with_pi( final_ig5_ra_index, instr_in_lo );
		end
		
		// Call instructions
		
		// (CALL Immediate, which sets the link register to the return
		// address, then sets the program counter to the destination
		// address)
		pkg_instr_dec::instr_g5_op_calli:
		begin
			//$display( "calli:  %h %h %h %h", `get_cpu_rp_pc,
			//	`get_pc_after_reg_instr, instr_in_lo,
			//	instr_is_branch_or_call );
			//`get_cpu_rp_lr <= `get_pc_after_reg_instr;
			//`get_cpu_rp_pc <= instr_in_lo;
			
			//`get_cpu_rp_lr <= `get_cpu_rp_pc;
			//
			//set_pc_and_dio_addr(instr_in_lo);
			
			// No need to do anything to instr_in_lo because I'm not sure
			// why
			exec_any_call(instr_in_lo);
		end
		
		// Indexed Load/store instructions:
		
		// (Load 8-bit value from memory at address [rBp + 16-bit Immediate
		// value] into rA)
		pkg_instr_dec::instr_g5_op_ldrxi:
		begin
			////$display("instr_g5_op_ldrxi:  %h %h %h\t\t%d",
			////	`get_final_ig5_rpair_b, instr_in_lo,
			////	( `get_final_ig5_rpair_b + instr_in_lo ),
			////	final_ig5_rbp_index );
			//
			//if (!data_ready)
			//begin
			//	if (!did_prep_ldst_instr)
			//	begin
			//		did_prep_ldst_instr <= 1;
			//		prep_load_8_with_addr( `get_final_ig5_rpair_b
			//			+ instr_in_lo );
			//	end
			//	
			//	else
			//	begin
			//		req_rdwr <= 0;
			//	end
			//end
			//
			//else // if (data_ready)
			//begin
			//	did_prep_ldst_instr <= 0;
			//	curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
			//end
			
			
			
			//// This 16-bit addition SHOULD use the ALU
			////prep_load_8_with_addr( `get_final_ig5_rpair_b + instr_in_lo );
			prep_load_8_with_addr(`get_alu_out_16);
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		// (Store rA to memory at address [rBp + 16-bit Immediate value])
		pkg_instr_dec::instr_g5_op_strxi:
		begin
			////$display( "strxi:  %h, %h, %h, %h", temp_data_in,
			////	`get_final_ig5_rpair_b, instr_in_lo, 
			////	( `get_final_ig5_rpair_b + instr_in_lo ) );
			////$display( "strxi:  r%dp", final_ig5_ra_index );
			////$display( "strxi:  %h %h", 
			////	instr_in_hi[ `instr_g5_ihi_ra_index_range_hi
			////	: `instr_g5_ihi_ra_index_range_lo ],
			////	instr_in_hi[ `instr_g5_ihi_rbp_index_range_hi
			////	: `instr_g5_ihi_rbp_index_range_lo ] );
			//
			//if (!data_ready)
			//begin
			//	if (!did_prep_ldst_instr)
			//	begin
			//		did_prep_ldst_instr <= 1;
			//		prep_store_8( `get_final_ig5_reg_a, 
			//			( `get_final_ig5_rpair_b + instr_in_lo ) );
			//	end
			//	
			//	else
			//	begin
			//		req_rdwr <= 0;
			//	end
			//end
			//
			////else // if (data_ready)
			//if (data_ready)
			//begin
			//	did_prep_ldst_instr <= 0;
			//	curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
			//end
			
			
			
			//// This 16-bit addition SHOULD use the ALU
			//prep_store_8( `get_final_ig5_reg_a, 
			//	( `get_final_ig5_rpair_b + instr_in_lo ) );
			prep_store_8( `get_final_ig5_reg_a, `get_alu_out_16 );
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		default:
		begin
			$display("Illegal Group 5 Instruction!");
		end
		
	endcase
	
	if (!final_ig5_instr_is_ldst)
	begin
		//start_exec_shared_non_ldst_suffix();
		prep_load_instr_hi_generic();
	end
	
	//else
	//begin
	//	$display("Group 5 Load or Store Instruction");
	//end
	
endtask



`endif		// instr_g5_tasks_svinc
