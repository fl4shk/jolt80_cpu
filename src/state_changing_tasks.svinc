// This file is part of Small Practice CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Small Practice CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Small Practice CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Small Practice CPU.  If not, see <http://www.gnu.org/licenses/>.


`ifndef state_changing_tasks_svinc
`define state_changing_tasks_svinc

//`define get_temp_pc { temp_pc[0], temp_pc[1] }
`define get_pc_adjuster_outputs { pc_adjuster_out_hi, pc_adjuster_out_lo }

// This task exists to help reduce bugs fro
task set_pc_and_dio_addr;
	input [`cpu_addr_msb_pos:0] val;
	
	`get_cpu_rp_pc <= val;
	data_inout_addr <= val;
endtask


////task advance_pc_etc_after_reg_instr;
////task advance_pc_etc_after_instr;
//task advance_pc_etc_after_load_instr_part;
//	//set_pc_and_dio_addr(`get_pc_after_reg_instr);
//	//$display("advance_pc_etc_after_load_instr_part:  %h %h", 
//	//	`get_cpu_rp_pc, `get_temp_pc );
//	//set_pc_and_dio_addr(`get_temp_pc);
//endtask



// Prepare to, on the next cycle, load an 8-bit value
task prep_load_8_no_addr;
	data_acc_sz <= pkg_cpu::cpu_data_acc_sz_8;
	data_inout_we <= 0;
	req_rdwr <= 1;
endtask
task prep_load_8_with_addr;
	input [`cpu_addr_msb_pos:0] read_addr;
	
	data_inout_addr <= read_addr;
	prep_load_8_no_addr();
endtask

// Prepare to, on the next cycle, write an 8-bit value
task prep_store_8;
	input [`cpu_data_inout_8_msb_pos:0] write_data;
	input [`cpu_addr_msb_pos:0] write_addr;
	
	data_inout_addr <= write_addr;
	temp_data_out <= write_data;
	data_acc_sz <= pkg_cpu::cpu_data_acc_sz_8;
	data_inout_we <= 1;
	req_rdwr <= 1;
endtask

// Prepare to, on the next cycle, load a 16-bit value
task prep_load_16_no_addr;
	data_acc_sz <= pkg_cpu::cpu_data_acc_sz_16;
	data_inout_we <= 0;
	//$display("prep_load_16_no_addr");
	req_rdwr <= 1;
endtask
task prep_load_16_with_addr;
	input [`cpu_addr_msb_pos:0] read_addr;
	
	data_inout_addr <= read_addr;
	prep_load_16_no_addr();
endtask




// Advance the PC after a non-branch, non-call instruction
task prep_load_instr_hi_after_reg;
	curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	//advance_pc_etc_after_load_instr_part();
	
	//advance_pc_etc_after_reg
	
	//$display("There MIGHT be a problem with prep_load_instr_hi_after_reg");
	if ( data_inout_addr == `get_cpu_rp_pc )
	begin
		prep_load_16_no_addr();
	end
	
	else // if ( data_inout_addr != `get_cpu_rp_pc )
	begin
		prep_load_16_with_addr(`get_cpu_rp_pc);
	end
endtask


task prep_load_instr_hi_generic;
	//req_rdwr <= 1;
	
	if (!instr_is_branch_or_call)
	begin
		//$display("!instr_is_branch_or_call");
		
		if (!non_bc_instr_possibly_changes_pc)
		begin
			//$display("!non_bc_instr_possibly_changes_pc");
			prep_load_instr_hi_after_reg();
		end
		
		else // if (non_bc_instr_possibly_changes_pc)
		begin
			curr_state <= pkg_cpu::cpu_st_update_pc_after_non_bc_ipc;
		end
	end
	
	else // if (instr_is_branch_or_call)
	begin
		$display("prep load instr hi generic:  instr is bc");
		$display( "pc:  %h %h", `get_cpu_rp_pc, `get_pc_adjuster_outputs );
		curr_state <= pkg_cpu::cpu_st_load_instr_hi;
		//prep_load_16_with_addr(`get_cpu_rp_pc);
		
		if (final_branch_was_taken)
		begin
			$display("Branch WAS taken");
			prep_load_16_with_addr(`get_pc_adjuster_outputs);
		end
		
		else // if (!final_branch_was_taken)
		begin
			$display("Branch was NOT taken");
			//prep_load_16_with_addr(`get_cpu_rp_pc);
			
			//if (!final_instr_is_32_bit)
			//begin
			//	prep_load_16_with_addr(`get_cpu_rp_pc)
			//end
			//else
			//begin
			//	
			//end
			
			// If the instruction is a branch instruction
			if ( final_instr_grp == pkg_instr_dec::instr_grp_4 )
			begin
				prep_load_16_with_addr(`get_cpu_rp_pc);
			end
			
			// If the instruction is a call instruction
			else
			begin
				prep_load_16_no_addr();
			end
		end
	end
	
endtask

task prep_load_instr_lo_reg;
	curr_state <= pkg_cpu::cpu_st_load_instr_lo;
	prep_load_16_no_addr();
endtask







task latch_logic_prep_pc_adjuster_for_branch;
	input [`instr_g4_imm_value_msb_pos:0] branch_offset;
	
	//{ pc_adjuster_op, pc_adjuster_a_in_hi, pc_adjuster_a_in_lo, 
	//	pc_adjuster_b_in_hi, pc_adjuster_b_in_lo }
	//	= { pkg_alu::addsub_op_addpsnx, `get_cpu_rp_pc, 8'h0, 
	//	branch_offset };
	{ pc_adjuster_a_in_hi, pc_adjuster_a_in_lo, pc_adjuster_b_in_hi, 
		pc_adjuster_b_in_lo }
		= { `get_cpu_rp_pc, 8'h0, branch_offset };
	
endtask

task seq_logic_grab_pc_adjuster_outputs;
	//$display("seq_logic_grab_pc_adjuster_outputs");
	//$display( "PC adjuster outputs:  %h", `get_pc_adjuster_outputs );
	set_pc_and_dio_addr(`get_pc_adjuster_outputs);
endtask



task latch_logic_prep_pc_inc_generic;
	input [`cpu_imm_value_16_msb_pos:0] specific_num_bytes;
	
	{ the_pc_inc_pc_in, the_pc_inc_offset_in } 
		= { `get_cpu_rp_pc, specific_num_bytes };
endtask

task latch_logic_prep_pc_inc_during_load_instr_portion;
	latch_logic_prep_pc_inc_generic(`instr_16_num_bytes);
endtask

task latch_logic_prep_pc_inc_after_non_bc_ipc;
	//$display("prep PC incrementer after non branch/call IPC");
	
	
	if ( ( !final_instr_is_32_bit 
		&& ( prev_pc == `get_cpu_rp_pc ) )
		|| ( final_instr_is_32_bit
		&& ( second_prev_pc == `get_cpu_rp_pc ) ) )
	begin
		//$display("nice");
		latch_logic_prep_pc_inc_generic(`instr_16_num_bytes);
	end
	else
	begin
		//$display("oh no");
		latch_logic_prep_pc_inc_generic(0);
	end
	//latch_logic_prep_pc_inc_generic(`instr_16_num_bytes);
endtask

task seq_logic_grab_pc_inc_outputs;
	$display( "seq_logic_grab_pc_inc_outputs:  %h", the_pc_inc_pc_out );
	set_pc_and_dio_addr(the_pc_inc_pc_out);
endtask


`endif		// state_changing_tasks_svinc
