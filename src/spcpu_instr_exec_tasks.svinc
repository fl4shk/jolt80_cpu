// This file is part of Small Practice CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Small Practice CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Small Practice CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Small Practice CPU.  If not, see <http://www.gnu.org/licenses/>.


`ifndef spcpu_instr_exec_tasks_svinc
`define spcpu_instr_exec_tasks_svinc


task start_exec_instr_from_grp_1;
	
	$display( "start_exec_instr_from_grp_1 is unfinished\t\t%h", 
		ig1_instr_changes_pc );
	
	
	curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	
	advance_pc_etc_after_reg_instr_16();
	prepare_to_load_16_no_addr();
	
endtask

task start_exec_instr_from_grp_2;
	$display("start_exec_instr_from_grp_2 is unfinished");
	
	curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	advance_pc_etc_after_reg_instr_16();
	prepare_to_load_16_no_addr();
endtask

task start_exec_instr_from_grp_3;
	$display("start_exec_instr_from_grp_3 is unfinished");
	
	curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	advance_pc_etc_after_reg_instr_16();
	prepare_to_load_16_no_addr();
endtask

task start_exec_instr_from_grp_4;
	$display("start_exec_instr_from_grp_4 is unfinished");
	
	curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	advance_pc_etc_after_reg_instr_16();
	prepare_to_load_16_no_addr();
endtask

task start_exec_instr_from_grp_5;
	$display("start_exec_instr_from_grp_5 is unfinished");
	
	curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	advance_pc_etc_after_reg_instr_32();
	prepare_to_load_16_no_addr();
endtask


// Start executing an instruction.  The instruction MAY only take one
// cycle.
task start_exec_instr;
	//$display("start_exec_instr()");
	
	case (final_instr_grp)
		pkg_instr_dec::instr_grp_1:
		begin
			start_exec_instr_from_grp_1();
		end
		
		pkg_instr_dec::instr_grp_2:
		begin
			start_exec_instr_from_grp_2();
		end
		
		pkg_instr_dec::instr_grp_3:
		begin
			start_exec_instr_from_grp_3();
		end
		
		pkg_instr_dec::instr_grp_4:
		begin
			start_exec_instr_from_grp_4();
		end
		
		pkg_instr_dec::instr_grp_5:
		begin
			start_exec_instr_from_grp_5();
		end
	endcase
endtask





task finish_exec_instr_from_grp_1;
	$display("finish_exec_instr_from_grp_1 is unfinished");
endtask

task finish_exec_instr_from_grp_2;
	$display("finish_exec_instr_from_grp_2 is unfinished");
endtask

task finish_exec_instr_from_grp_3;
	$display("finish_exec_instr_from_grp_3 is unfinished");
endtask

task finish_exec_instr_from_grp_4;
	$display("finish_exec_instr_from_grp_4 is unfinished");
endtask

task finish_exec_instr_from_grp_5;
	$display("finish_exec_instr_from_grp_5 is unfinished");
endtask

// Finish executing a instruction (second execution cycle of a multi-cycle
// instruction)
task finish_exec_instr;
	//debug_disp_instr();
	//$display();
	
	case (final_instr_grp)
		pkg_instr_dec::instr_grp_1:
		begin
			finish_exec_instr_from_grp_1();
		end
		
		pkg_instr_dec::instr_grp_2:
		begin
			finish_exec_instr_from_grp_2();
		end
		
		pkg_instr_dec::instr_grp_3:
		begin
			finish_exec_instr_from_grp_3();
		end
		
		pkg_instr_dec::instr_grp_4:
		begin
			finish_exec_instr_from_grp_4();
		end
		
		pkg_instr_dec::instr_grp_5:
		begin
			finish_exec_instr_from_grp_5();
		end
	endcase
	
	// After finishing an instruction, the next step should ALWAYS be to
	// load another instruction.
	curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	
endtask



`endif		// spcpu_instr_exec_tasks_svinc
