// This file is part of Jolt80 CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Jolt80 CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Jolt80 CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Jolt80 CPU.  If not, see <http://www.gnu.org/licenses/>.


`include "src/instr_decoder_defines.svinc"
`include "src/cpu_extras_defines.svinc"


package pkg_instr_dec;
	
	
	
	typedef enum bit [`instr_grp_msb_pos:0]
	{
		// Non-branching instructions with 8-bit immediate values
		instr_grp_1,
		
		// The instruction group with the most opcodes
		instr_grp_2,
		
		// Instructions with one register and two register pairs
		instr_grp_3,
		
		// Branching instructions
		instr_grp_4,
		
		// Instructions encoded with four bytes instead of two so that
		// there can be 16-bit immediate values
		instr_grp_5,
		
		
		// The instruction is of an unknown group
		instr_grp_unknown
		
	} instr_group;
	
	
	// Instruction group 1 has 3 opcode bits
	// Encoding:  0ooo aaaa iiii iiii
	typedef enum bit [`instr_g1_op_msb_pos:0]
	{
		// Arithmetic instructions:
		instr_g1_op_addi,
		instr_g1_op_adci,
		
		// (ADD 8-bit Immediate value to reg Pair rAp)
		instr_g1_op_addpbi,
		// (SuBtract 8-bit Immediate value from reg Pair rAp [NOT an
		// assembler alias for addpbi])
		instr_g1_op_subpbi,
		
		instr_g1_op_cmpi,
		
		
		// Bitwise instructions with two operands:
		instr_g1_op_andi,
		instr_g1_op_orri,
		
		//Copy instructions:
		
		// (CoPY Immediate)
		instr_g1_op_cpyi 
	} instr_grp_1_oper;
	
	
	//// Instruction group 2 has 6 opcode bits
	//// Encoding:  10oo oooo aaaa bbbb
	//typedef enum bit [`instr_g2_op_msb_pos:0]
	//{
	//	// Arithmetic instructions:
	//	instr_g2_op_add,
	//	instr_g2_op_adc,
	//	// (ADD register rB to reg Pair rAp)
	//	instr_g2_op_addpb,
	//	// ([16-bit] ADD reg Pair rBp to reg Pair rAp)
	//	instr_g2_op_addp,
	//	
	//	instr_g2_op_sub,
	//	instr_g2_op_sbc,
	//	// (SuBtract 8-bit register rB from reg Pair rAp)
	//	instr_g2_op_subpb,
	//	// ([16-bit] SuBtract reg Pair rBp from reg Pair rAp)
	//	instr_g2_op_subp,
	//	
	//	instr_g2_op_cmp,
	//	// (16-bit comparison of rAp and rBp)
	//	instr_g2_op_cmpp,
	//	
	//	// Bitwise instructions with two register operands:
	//	instr_g2_op_and,
	//	instr_g2_op_orr,
	//	instr_g2_op_xor,
	//	
	//	// Complement instructions with one register operand (rB ignored):
	//	
	//	// (one's complement of rA)
	//	instr_g2_op_inv,
	//	
	//	// (one's complement of rAp)
	//	instr_g2_op_invp,
	//	
	//	// (two's complement of rA)
	//	instr_g2_op_neg,
	//	
	//	// (two's complement of rAp)
	//	instr_g2_op_negp,
	//	
	//	
	//	// Bitshifting (and rotating) instructions that use the value of rB
	//	// as the number of bits to shift by:
	//	instr_g2_op_lsl,
	//	instr_g2_op_lsr,
	//	instr_g2_op_asr,
	//	instr_g2_op_rol,
	//	instr_g2_op_ror,
	//	
	//	
	//	// Bit rotating instructions that use carry as bit 8 for a 9-bit
	//	// rotate of { carry, rA } by one bit:
	//	instr_g2_op_rolc,
	//	instr_g2_op_rorc,
	//	
	//	
	//	// Bitshifting (and rotating) instructions that do a 16-bit shift
	//	// or rotate on the reg pair rAp, using rB as the number of bits to
	//	// shift by:
	//	instr_g2_op_lslp,
	//	instr_g2_op_lsrp,
	//	instr_g2_op_asrp,
	//	instr_g2_op_rolp,
	//	instr_g2_op_rorp,
	//	
	//	
	//	// Bit rotating instructions that use carry as bit 16 for a 17-bit
	//	// rotate of { carry, rAp } by one bit:
	//	instr_g2_op_rolcp,
	//	instr_g2_op_rorcp,
	//	
	//	
	//	// Copy instructions:
	//	
	//	// (CoPY from reg rB to reg rA)
	//	instr_g2_op_cpy,
	//	
	//	// (CoPY from reg Pair rBp to reg Pair rAp)
	//	instr_g2_op_cpyp,
	//	
	//	// (Clear reg rA, then CoPY FRom Flags to reg rA)
	//	instr_g2_op_cpyfrf,
	//	// (CoPY TO Flags from reg rA)
	//	instr_g2_op_cpytof,
	//	
	//	// Swap instructions:
	//	// (SWap register Pair, also can be used as a combined "call",
	//	// "jump", and "return" instruction by swapping some other register
	//	// pair with the "pc" [r14p] register pair)
	//	instr_g2_op_swp,
	//	
	//	
	//	// Call instruction (Description:  sets the link register to the
	//	// return address, then sets the program counter to the address
	//	// contained in the reg pair rAp):
	//	
	//	// (CALL subroutine at address in reg pair rAp)
	//	instr_g2_op_call,
	//	
	//	
	//	// 8-bit Load/store instructions:
	//	
	//	// (LoaD contents into Register rA from memory at address in rBp)
	//	instr_g2_op_ldr,
	//	
	//	// (STore Register rA contents to memory at address in rBp)
	//	instr_g2_op_str,
	//	
	//	
	//	
	//	// 8-bit Push/pop style instructions:
	//	
	//	// (Add 1 the reg pair rBp, then LoaD contents into Register rA
	//	// from memory at address contained in reg pair rBp)
	//	instr_g2_op_ldrab,
	//	
	//	// (STore reg rA to memory at address contained in reg pair rBp,
	//	// then Subtract 1 from the reg pair rBp)
	//	instr_g2_op_strsa,
	//	
	//	// (Add 1 to the reg pair rBp, then LoaD a byte containing
	//	// processor Flags (other bits cleared) into the processor flags)
	//	instr_g2_op_ldfab,
	//	
	//	// (STore a byte containing the current processor flags (other bits
	//	// cleared) to memory at address contained in reg pair rBp, then
	//	// Add 1 the reg pair rBp)
	//	instr_g2_op_stfsa,
	//	
	//	
	//	// Interrupt instructions (these ignore BOTH rA and rB):
	//	// (ENable Interrupts)
	//	instr_g2_op_eni,
	//	// (DIsable Interrupts)
	//	instr_g2_op_dii,
	//	
	//	// (Set the PC to Interrupt RETurn address and enable interrupts)
	//	instr_g2_op_reti,
	//	
	//	// Extra Interrupt Instructions
	//	// (Swap the Interrupt Return Address and rAp)
	//	instr_g2_op_swpira,
	//	// (CoPY the Interrupt Return Address to rAp)
	//	instr_g2_op_cpypira 
	//	
	//} instr_grp_2_oper;
	
	// Instruction group 2 has 6 opcode bits
	// Encoding:  10oo oooo aaaa bbbb
	typedef enum bit [`instr_g2_op_msb_pos:0]
	{
		
		// -- rA, rB --
		
		// Arithmetic instructions:
		instr_g2_op_add,
		instr_g2_op_adc,
		instr_g2_op_sub,
		instr_g2_op_sbc,
		instr_g2_op_cmp,
		
		// Bitwise instructions with two register operands:
		instr_g2_op_and,
		instr_g2_op_orr,
		instr_g2_op_xor,
		
		//// Bitshifting (and rotating) instructions that use the value of 
		//// rB as the number of bits to shift by:
		//instr_g2_op_lsl,
		//instr_g2_op_lsr,
		//instr_g2_op_asr,
		//instr_g2_op_rol,
		//instr_g2_op_ror,
		//
		//// Bit rotating instructions that use carry as bit 8 for a 9-bit
		//// rotate of { carry, rA } by one bit:
		//instr_g2_op_rolc,
		//instr_g2_op_rorc,
		
		// Copy instructions:
		// (CoPY from reg rB to reg rA)
		instr_g2_op_cpy,
		
		
		
		
		// -- rA --
		
		// Complement instructions with one register operand (rB ignored):
		// (one's complement of rA)
		instr_g2_op_inv,
		// (two's complement of rA)
		instr_g2_op_neg,
		// (Clear reg rA, then CoPY FRom Flags to reg rA)
		instr_g2_op_cpyfrf,
		// (CoPY TO Flags from reg rA)
		instr_g2_op_cpytof,
		
		
		
		
		// -- rAp --
		
		// Complement instructions with one register operand (rB ignored):
		// (one's complement of rAp)
		instr_g2_op_invp,
		
		// (two's complement of rA)
		instr_g2_op_negp,
		
		// Bit rotating instructions that use carry as bit 16 for a 17-bit
		// rotate of { carry, rAp } by one bit:
		instr_g2_op_rolcp,
		instr_g2_op_rorcp,
		
		// Call instruction (Description:  sets the link register to the
		// return address, then sets the program counter to the address
		// contained in the reg pair rAp): (CALL subroutine at address in
		// reg pair rAp)
		instr_g2_op_call,
		
		// Extra Interrupt Instructions
		// (Swap the Interrupt Return Address and rAp)
		instr_g2_op_swpira,
		// (CoPY the Interrupt Return Address to rAp)
		instr_g2_op_cpypira,
		
		
		
		
		// -- rAp, rB --
		
		//// Arithmetic instructions:
		//instr_g2_op_addpb,
		//instr_g2_op_subpb,
		
		// Bitshifting (and rotating) instructions that do a 16-bit shift
		// or rotate on the reg pair rAp, using rB as the number of bits to
		// shift by:
		instr_g2_op_lslp,
		instr_g2_op_lsrp,
		instr_g2_op_asrp,
		instr_g2_op_rolp,
		instr_g2_op_rorp,
		
		
		
		
		// -- rA, rBp --
		
		// 8-bit Load/store instructions: (LoaD contents into Register rA
		// from memory at address in rBp)
		instr_g2_op_ldr,
		// (STore Register rA contents to memory at address in rBp)
		instr_g2_op_str,
		
		// 8-bit Push/pop style instructions:
		
		// (Add 1 the reg pair rBp, then LoaD contents into Register rA
		// from memory at address contained in reg pair rBp)
		instr_g2_op_ldrab,
		// (STore reg rA to memory at address contained in reg pair rBp,
		// then Subtract 1 from the reg pair rBp)
		instr_g2_op_strsa,
		
		
		
		
		// -- rAp, rBp --
		
		// Arithmetic instructions:
		instr_g2_op_addp,
		instr_g2_op_subp,
		instr_g2_op_cmpp,
		
		// (CoPY from reg Pair rBp to reg Pair rAp)
		instr_g2_op_cpyp,
		// Swap instructions: (SWap register Pair, also can be used as a
		// combined "call", "jump", and "return" instruction by swapping
		// some other register pair with the "pc" [r14p] register pair)
		instr_g2_op_swp,
		
		
		
		
		// -- rBp --
		
		// (Add 1 to the reg pair rBp, then LoaD a byte containing
		// processor Flags (other bits cleared) into the processor flags)
		instr_g2_op_ldfab,
		// (STore a byte containing the current processor flags (other bits
		// cleared) to memory at address contained in reg pair rBp, then
		// Add 1 the reg pair rBp)
		instr_g2_op_stfsa,
		
		
		
		
		// -- no args --
		
		// Interrupt instructions (these ignore BOTH rA and rB):
		// (ENable Interrupts)
		instr_g2_op_eni,
		// (DIsable Interrupts)
		instr_g2_op_dii,
		// (Set the PC to interrupt RETurn address and enable Interrupts)
		instr_g2_op_reti
		
		
	} instr_grp_2_oper;
	
	// Instruction group 3 has 2 opcode bits
	// Encoding:  1100 ooaa aabb bccc
	typedef enum bit [`instr_g3_op_msb_pos:0]
	{
		// Indexed Load/store instructions:
		
		// Load 8-bit value from memory at address [rBp + rCp] into rA
		instr_g3_op_ldrx,
		
		// Store rA to memory at address [rBp + rCp]
		instr_g3_op_strx 
	} instr_grp_3_oper;
	
	
	// Instruction group 4 has 4 opcode bits
	// Encoding:  1101 oooo iiii iiii
	typedef enum bit [`instr_g4_op_msb_pos:0]
	{
		// Branching instructions (note that iiii iiii is a SIGNED 8-bit
		// integer):
		
		// (branch always)
		instr_g4_op_bra,
		
		// (branch never, a form of NOP)
		instr_g4_op_bnv,
		
		// (branch when Z == 0)
		instr_g4_op_bne,
		
		// (branch when Z == 1)
		instr_g4_op_beq,
		
		// (branch when C == 0 [unsigned less than])
		instr_g4_op_bcc,
		
		// (branch when C == 1 [unsigned greater than or equal])
		instr_g4_op_bcs,
		
		// (branch when C == 0 or Z == 1 [unsigned less than or equal])
		instr_g4_op_bls,
		
		// (branch when C == 1 and Z == 0 [unsigned greater than])
		instr_g4_op_bhi,
		
		// (branch when N == 0)
		instr_g4_op_bpl,
		
		// (branch when N == 1)
		instr_g4_op_bmi,
		
		// (branch when V == 0)
		instr_g4_op_bvc,
		
		// (branch when V == 1)
		instr_g4_op_bvs,
		
		// (branch when N == V [signed greater than or equal])
		instr_g4_op_bge,
		
		// (branch when N != V [signed less than])
		instr_g4_op_blt,
		
		// (branch when ( N == V and Z == 0 ) [signed greater than])
		instr_g4_op_bgt,
		
		// (branch when ( N != V or Z == 1 ) [signed less than or equal])
		instr_g4_op_ble
		
	} instr_grp_4_oper;
	
	
	// Instruction group 5 has 3 opcode bits
	// Encoding:  1110 00oo oaaa abbb   iiii iiii jjjj jjjj
	typedef enum bit [`instr_g5_op_msb_pos:0]
	{
		// Extended copy instructions:
		
		// (COPY Pair Immediate, which sets the a register pair rAp to a
		// 16-bit value in one instruction, but in twice the number of
		// cycles due to using more than two bytes [can be used a as a jump
		// immediate by copying a 16-bit immediate value to the pc] [this
		// instruction ONLY has an advantage over using two successive cpyi
		// instructions when used to copy a 16-bit immediate value to the
		// pc])
		instr_g5_op_cpypi,
		
		// Call instructions
		
		// (CALL Immediate, which sets the link register to the return
		// address, then sets the program counter to the destination
		// address)
		instr_g5_op_calli,
		
		// Indexed Load/store instructions:
		
		// (Load 8-bit value from memory at address [rBp + 16-bit Immediate
		// value] into rA)
		instr_g5_op_ldrxi,
		
		// (Store rA to memory at address [rBp + 16-bit Immediate value])
		instr_g5_op_strxi
		
	} instr_grp_5_oper;
	
	
	
	function get_instr_is_32_bit;
		input [`instr_grp_msb_pos:0] test_instr_grp;
		get_instr_is_32_bit = ( test_instr_grp == instr_grp_5 );
	endfunction
	
	
	// Functions for checking whether a reg index is actually a reg pair
	// index
	function ig1_get_ra_index_is_for_pair;
		input [`instr_g1_op_msb_pos:0] test_ig1_opcode;
		
		ig1_get_ra_index_is_for_pair 
			= ( ( test_ig1_opcode == instr_g1_op_addpbi )
			|| ( test_ig1_opcode == instr_g1_op_subpbi ) );
	endfunction
	
	//function ig2_get_ra_index_is_for_pair;
	//	input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
	//	ig2_get_ra_index_is_for_pair 
	//		= ( ( test_ig2_opcode == instr_g2_op_addpb )
	//		|| ( test_ig2_opcode == instr_g2_op_addp )
	//		|| ( test_ig2_opcode == instr_g2_op_subpb )
	//		|| ( test_ig2_opcode == instr_g2_op_subp )
	//		|| ( test_ig2_opcode == instr_g2_op_cmpp )
	//		
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_invp )
	//		|| ( test_ig2_opcode == instr_g2_op_negp )
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_lslp )
	//		|| ( test_ig2_opcode == instr_g2_op_lsrp )
	//		|| ( test_ig2_opcode == instr_g2_op_asrp )
	//		|| ( test_ig2_opcode == instr_g2_op_rolp )
	//		|| ( test_ig2_opcode == instr_g2_op_rorp )
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_rolcp )
	//		|| ( test_ig2_opcode == instr_g2_op_rorcp )
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_cpyp )
	//		|| ( test_ig2_opcode == instr_g2_op_swp )
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_call )
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_swpira )
	//		|| ( test_ig2_opcode == instr_g2_op_cpypira) );
	//endfunction
	//
	//function ig2_get_rb_index_is_for_pair;
	//	input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
	//	ig2_get_rb_index_is_for_pair
	//		= ( ( test_ig2_opcode == instr_g2_op_addp )
	//		|| ( test_ig2_opcode == instr_g2_op_subp )
	//		|| ( test_ig2_opcode == instr_g2_op_cmpp )
	//		
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_cpyp )
	//		|| ( test_ig2_opcode == instr_g2_op_swp )
	//		|| ( test_ig2_opcode == instr_g2_op_ldr )
	//		|| ( test_ig2_opcode == instr_g2_op_str ) 
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_ldrab )
	//		|| ( test_ig2_opcode == instr_g2_op_strsa )
	//		|| ( test_ig2_opcode == instr_g2_op_ldfab )
	//		|| ( test_ig2_opcode == instr_g2_op_stfsa ) );
	//endfunction
	
	function ig2_get_op_in_range;
		input [`instr_g2_op_msb_pos:0] test_ig2_opcode, range_lo, range_hi;
		
		ig2_get_op_in_range = ( ( test_ig2_opcode >= range_lo )
			&& ( test_ig2_opcode <= range_hi ) );
	endfunction
	
	function ig2_get_ra_index_is_for_pair;
		input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
		ig2_get_ra_index_is_for_pair
			//= ( ( ( test_ig2_opcode >= instr_g2_op_inv ) 
			//&& ( test_ig2_opcode <= instr_g2_op_cpypira ) )
			//
			//|| ( ( test_ig2_opcode >= instr_g2_op_addpb )
			//&& ( test_ig2_opcode <= instr_g2_op_rorp ) )
			//
			//|| ( ( test_ig2_opcode >= instr_g2_op_addp )
			//&& ( test_ig2_opcode <= instr_g2_op_swp ) ) );
			= ( ig2_get_op_in_range( test_ig2_opcode, instr_g2_op_invp,
			instr_g2_op_cpypira )
			|| ig2_get_op_in_range( test_ig2_opcode, instr_g2_op_lslp,
			instr_g2_op_rorp )
			|| ig2_get_op_in_range( test_ig2_opcode, instr_g2_op_addp, 
			instr_g2_op_swp ) );
	endfunction
	
	function ig2_get_rb_index_is_for_pair;
		input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
		ig2_get_rb_index_is_for_pair
			//= ( ( ( test_ig2_opcode >= instr_g2_op_ldr )
			//&& ( test_ig2_opcode <= instr_g2_op_strsa ) )
			//
			//|| ( ( test_ig2_opcode >= instr_g2_op_addp )
			//&& ( test_ig2_opcode <= instr_g2_op_swp ) )
			//
			//|| ( ( test_ig2_opcode >= instr_g2_op_ldfab )
			//&& ( test_ig2_opcode <= instr_g2_op_stfsa ) ) );
			= ( ig2_get_op_in_range( test_ig2_opcode, instr_g2_op_ldr,
			instr_g2_op_strsa )
			|| ig2_get_op_in_range( test_ig2_opcode, instr_g2_op_addp,
			instr_g2_op_swp )
			|| ig2_get_op_in_range( test_ig2_opcode, instr_g2_op_ldfab,
			instr_g2_op_stfsa ) );
	endfunction
	
	function ig5_get_ra_index_is_for_pair;
		input [`instr_g5_op_msb_pos:0] test_ig5_opcode;
		ig5_get_ra_index_is_for_pair
			= ( test_ig5_opcode == instr_g5_op_cpypi );
	endfunction
	
	
	
	// Functions for checking whether an instruction can possibly change
	// the pc (though it might NOT change, in which case we need to update
	// the pc normally)
	
	//function ig1_get_ra_instr_can_change_pc;
	//	input [`instr_g1_op_msb_pos:0] test_ig1_opcode;
	//	
	//	ig1_get_ra_instr_can_change_pc
	//	// Arithmetic instructions:
	//		= ( ( test_ig1_opcode == instr_g1_op_addi )
	//		|| ( test_ig1_opcode == instr_g1_op_adci )
	//	
	//	// Skip instr_g1_op_cmpi because it CAN'T change registers
	//	//// || ( test_ig1_opcode == instr_g1_op_cmpi )
	//	// Bitwise instructions with two operands:
	//		|| ( test_ig1_opcode == instr_g1_op_andi )
	//		|| ( test_ig1_opcode == instr_g1_op_orri )
	//	
	//	//Copy instructions:
	//	
	//	// (CoPY Immediate)
	//		|| ( test_ig1_opcode == instr_g1_op_cpyi ) );
	//	
	//endfunction
	//function ig1_get_rap_instr_can_change_pc;
	//	input [`instr_g1_op_msb_pos:0] test_ig1_opcode;
	//	
	//	ig1_get_rap_instr_can_change_pc
	//		= ( test_ig1_opcode == instr_g1_op_addpbi )
	//		|| ( test_ig1_opcode == instr_g1_op_subpbi );
	//endfunction
	
	
	// The call instruction ALWAYS changes the pc
	function ig2_get_instr_definitely_changes_pc;
		input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
		
		ig2_get_instr_definitely_changes_pc
			= ( ( test_ig2_opcode == instr_g2_op_call )
			|| ( test_ig2_opcode == instr_g2_op_reti ) );
	endfunction
	
	//function ig2_get_ra_instr_can_change_pc;
	//	input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
	//	// Arithmetic instructions:
	//	ig2_get_ra_instr_can_change_pc
	//		= ( ( test_ig2_opcode == instr_g2_op_add )
	//		|| ( test_ig2_opcode == instr_g2_op_adc )
	//		
	//		|| ( test_ig2_opcode == instr_g2_op_sub )
	//		|| ( test_ig2_opcode == instr_g2_op_sbc )
	//	
	//	// Bitwise instructions with two register operands:
	//		|| ( test_ig2_opcode == instr_g2_op_and )
	//		|| ( test_ig2_opcode == instr_g2_op_orr )
	//		|| ( test_ig2_opcode == instr_g2_op_xor )
	//	
	//	// Complement instructions with one register operand (rB ignored):
	//		|| ( test_ig2_opcode == instr_g2_op_inv )
	//		|| ( test_ig2_opcode == instr_g2_op_neg )
	//	
	//	
	//	// Bitshifting (and rotating) instructions that use the value of rB
	//	// as the number of bits to shift by:
	//		|| ( test_ig2_opcode == instr_g2_op_lsl )
	//		|| ( test_ig2_opcode == instr_g2_op_lsr )
	//		|| ( test_ig2_opcode == instr_g2_op_asr )
	//		|| ( test_ig2_opcode == instr_g2_op_rol )
	//		|| ( test_ig2_opcode == instr_g2_op_ror )
	//	
	//	
	//	// Bit rotating instructions that use carry as bit 8 for a 9-bit
	//	// rotate of { carry, rA } by one bit:
	//		|| ( test_ig2_opcode == instr_g2_op_rolc )
	//		|| ( test_ig2_opcode == instr_g2_op_rorc )
	//	
	//	
	//	// Copy instructions:
	//		|| ( test_ig2_opcode == instr_g2_op_cpy )
	//		|| ( test_ig2_opcode == instr_g2_op_cpyfrf )
	//	
	//	// 8-bit Load/store instructions:
	//		|| ( test_ig2_opcode == instr_g2_op_ldr )
	//		
	//	// 8-bit Push/pop style instructions:
	//	// (Add 1 the reg pair rBp, then LoaD contents into Register rA
	//	// from memory at address contained in reg pair rBp)
	//		|| ( test_ig2_opcode == instr_g2_op_ldrab ) );
	//endfunction
	//
	//
	//function ig2_get_rap_instr_can_change_pc;
	//	input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
	//	
	//	ig2_get_rap_instr_can_change_pc
	//		= ( ( test_ig2_opcode == instr_g2_op_addpb )
	//		|| ( test_ig2_opcode == instr_g2_op_addp )
	//		|| ( test_ig2_opcode == instr_g2_op_subpb )
	//		|| ( test_ig2_opcode == instr_g2_op_subp )
	//	
	//	// Complement instructions with one register operand (rB ignored):
	//		|| ( test_ig2_opcode == instr_g2_op_invp )
	//		|| ( test_ig2_opcode == instr_g2_op_negp )
	//	
	//	// Bitshifting (and rotating) instructions that do a 16-bit shift
	//	// or rotate on the reg pair rAp, using rB as the number of bits to
	//	// shift by:
	//		|| ( test_ig2_opcode == instr_g2_op_lslp )
	//		|| ( test_ig2_opcode == instr_g2_op_lsrp )
	//		|| ( test_ig2_opcode == instr_g2_op_asrp )
	//		|| ( test_ig2_opcode == instr_g2_op_rolp )
	//		|| ( test_ig2_opcode == instr_g2_op_rorp )
	//	
	//	
	//	// Bit rotating instructions that use carry as bit 16 for a 17-bit
	//	// rotate of { carry, rAp } by one bit:
	//		|| ( test_ig2_opcode == instr_g2_op_rolcp )
	//		|| ( test_ig2_opcode == instr_g2_op_rorcp )
	//	
	//	// Copy instructions:
	//		|| ( test_ig2_opcode == instr_g2_op_cpyp )
	//	
	//	// Swap instructions:
	//	// (SWap register Pair, also can be used as a combined "call",
	//	// "jump", and "return" instruction by swapping some other register
	//	// pair with the "pc" [r14p] register pair)
	//		|| ( test_ig2_opcode == instr_g2_op_swp )
	//	
	//	
	//	// Extra Interrupt Instructions
	//	// (Swap the Interrupt Return Address and rAp)
	//		|| ( test_ig2_opcode == instr_g2_op_swpira )
	//	// (CoPY the Interrupt Return Address to rAp)
	//		|| ( test_ig2_opcode == instr_g2_op_cpypira ) );
	//	
	//endfunction
	//
	//function ig2_get_rbp_instr_can_change_pc;
	//	input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
	//	ig2_get_rbp_instr_can_change_pc 
	//		= ( test_ig2_opcode == instr_g2_op_swp );
	//endfunction
	
	
	// Simplify the ig2_get_..._instr_can_change_pc functions by making
	// them assume that they can change the PC if the PC is included as an
	// operand
	//function ig2_get_ra_instr_can_change_pc;
	//	input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
	//	ig2_get_ra_instr_can_change_pc
	//		= !ig2_get_ra_index_is_for_pair(test_ig2_opcode);
	//endfunction
	//
	//function ig2_get_rap_instr_can_change_pc;
	//	input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
	//	ig2_get_rap_instr_can_change_pc
	//		= ig2_get_ra_index_is_for_pair(test_ig2_opcode);
	//endfunction
	//
	//function ig2_get_rbp_instr_can_change_pc;
	//	input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
	//	ig2_get_rbp_instr_can_change_pc 
	//		= ig2_get_rb_index_is_for_pair(test_ig2_opcode);
	//endfunction
	
	
	
	//function ig3_get_ra_instr_can_change_pc;
	//	input [`instr_g3_op_msb_pos:0] test_ig3_opcode;
	//	ig3_get_ra_instr_can_change_pc
	//		= ( test_ig3_opcode == instr_g3_op_ldrx );
	//endfunction
	
	// The calli instruction ALWAYS changes the pc
	function ig5_get_instr_definitely_changes_pc;
		input [`instr_g2_op_msb_pos:0] test_ig5_opcode;
		
		ig5_get_instr_definitely_changes_pc
			= ( test_ig5_opcode == instr_g5_op_calli );
		
	endfunction
	
	//function ig5_get_ra_instr_can_change_pc;
	//	input [`instr_g5_op_msb_pos:0] test_ig5_opcode;
	//	ig5_get_ra_instr_can_change_pc
	//		= ( test_ig5_opcode == instr_g5_op_ldrxi );
	//endfunction
	//
	//function ig5_get_rap_instr_can_change_pc;
	//	input [`instr_g5_op_msb_pos:0] test_ig5_opcode;
	//	ig5_get_rap_instr_can_change_pc
	//		= ( test_ig5_opcode == instr_g5_op_cpypi );
	//endfunction
	
	
	// Functions for checking whether an instruction is a load or store
	// instruction
	function ig1_get_instr_is_ldst;
		input [`instr_g1_op_msb_pos:0] test_ig1_opcode;
		ig1_get_instr_is_ldst = 0;
	endfunction
	
	function ig2_get_instr_is_ldst;
		input [`instr_g2_op_msb_pos:0] test_ig2_opcode;
		ig2_get_instr_is_ldst = ( ( test_ig2_opcode == instr_g2_op_ldr )
			|| ( test_ig2_opcode == instr_g2_op_str )
			|| ( test_ig2_opcode == instr_g2_op_ldrab )
			|| ( test_ig2_opcode == instr_g2_op_strsa )
			|| ( test_ig2_opcode == instr_g2_op_ldfab )
			|| ( test_ig2_opcode == instr_g2_op_stfsa ) );
	endfunction
	
	function ig3_get_instr_is_ldst;
		input [`instr_g3_op_msb_pos:0] test_ig3_opcode;
		ig3_get_instr_is_ldst = ( ( test_ig3_opcode == instr_g3_op_ldrx )
			|| ( test_ig3_opcode == instr_g3_op_strx ) );
	endfunction
	
	function ig4_get_instr_is_ldst;
		input [`instr_g4_op_msb_pos:0] test_ig4_opcode;
		ig4_get_instr_is_ldst = 0;
	endfunction
	
	function ig5_get_instr_is_ldst;
		input [`instr_g5_op_msb_pos:0] test_ig5_opcode;
		ig5_get_instr_is_ldst = ( ( test_ig5_opcode == instr_g5_op_ldrxi )
			|| ( test_ig5_opcode == instr_g5_op_strxi ) );
	endfunction
	
	// Functions for checking whether a branch will be taken
	function ig4_get_branch_was_taken;
		input [`instr_g4_op_msb_pos:0] test_ig4_opcode;
		input [`proc_flags_msb_pos:0] test_proc_flags;
		
		ig4_get_branch_was_taken
			// (branch always)
			= ( ( test_ig4_opcode == instr_g4_op_bra )
			
			// (branch when Z == 0)
			|| ( test_ig4_opcode == instr_g4_op_bne
			&& !test_proc_flags[pkg_pflags::pf_slot_z] )
			
			// (branch when Z == 1)
			|| ( test_ig4_opcode == instr_g4_op_beq
			&& test_proc_flags[pkg_pflags::pf_slot_z] )
			
			// (branch when C == 0 [unsigned less than])
			|| ( test_ig4_opcode == instr_g4_op_bcc
			&& !test_proc_flags[pkg_pflags::pf_slot_c] )
			
			// (branch when C == 1 [unsigned greater than or equal])
			|| ( test_ig4_opcode == instr_g4_op_bcs
			&& test_proc_flags[pkg_pflags::pf_slot_c] )
			
			// (branch when C == 0 or Z == 1 [unsigned less than or equal])
			|| ( test_ig4_opcode == instr_g4_op_bls
			&& ( !test_proc_flags[pkg_pflags::pf_slot_c]
			|| test_proc_flags[pkg_pflags::pf_slot_z] ) )
			
			// (branch when C == 1 and Z == 0 [unsigned greater than])
			|| ( test_ig4_opcode == instr_g4_op_bhi 
			&& ( test_proc_flags[pkg_pflags::pf_slot_c]
			&& !test_proc_flags[pkg_pflags::pf_slot_z] ) ) 
			
			
			// (branch when N == 0)
			|| ( test_ig4_opcode == instr_g4_op_bpl
			&& ( !test_proc_flags[pkg_pflags::pf_slot_n] ) )
			
			// (branch when N == 1)
			|| ( test_ig4_opcode == instr_g4_op_bmi
			&& ( test_proc_flags[pkg_pflags::pf_slot_n] ) )
			
			// (branch when V == 0)
			|| ( test_ig4_opcode == instr_g4_op_bvc
			&& ( !test_proc_flags[pkg_pflags::pf_slot_v] ) )
			
			// (branch when V == 1)
			|| ( test_ig4_opcode == instr_g4_op_bvs
			&& ( test_proc_flags[pkg_pflags::pf_slot_v] ) )
			
			// (branch when N == V [signed greater than or equal])
			|| ( test_ig4_opcode == instr_g4_op_bge
			&& ( test_proc_flags[pkg_pflags::pf_slot_n]
			== test_proc_flags[pkg_pflags::pf_slot_v] ) )
			
			// (branch when N != V [signed less than])
			|| ( test_ig4_opcode == instr_g4_op_blt
			&& ( test_proc_flags[pkg_pflags::pf_slot_n]
			!= test_proc_flags[pkg_pflags::pf_slot_v] ) )
			
			// (branch when ( N == V and Z == 0 ) [signed greater than])
			|| ( test_ig4_opcode == instr_g4_op_bgt
			&& ( ( test_proc_flags[pkg_pflags::pf_slot_n]
			== test_proc_flags[pkg_pflags::pf_slot_v] )
			&& !test_proc_flags[pkg_pflags::pf_slot_z] ) )
			
			// (branch when ( N != V or Z == 1 ) [signed less than or
			// equal])
			|| ( test_ig4_opcode == instr_g4_op_ble
			&& ( ( test_proc_flags[pkg_pflags::pf_slot_n]
			!= test_proc_flags[pkg_pflags::pf_slot_v] )
			|| test_proc_flags[pkg_pflags::pf_slot_z] ) ) );
	endfunction
	
	
endpackage


