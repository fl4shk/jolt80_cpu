// This file is part of Small Practice CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Small Practice CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Small Practice CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Small Practice CPU.  If not, see <http://www.gnu.org/licenses/>.


`ifndef instr_exec_tasks_svinc
`define instr_exec_tasks_svinc


`define get_final_ig1_reg_a cpu_regs[final_ig1_ra_index]

`define get_final_ig2_reg_a cpu_regs[final_ig2_ra_index]
`define get_final_ig2_reg_b cpu_regs[final_ig2_rb_index]
`define get_final_ig2_rpair_a `make_reg_pair_w_pi(final_ig2_ra_index)
`define get_final_ig2_rpair_b `make_reg_pair_w_pi(final_ig2_rb_index)

`define get_final_ig3_reg_a cpu_regs[final_ig3_ra_index]
`define get_final_ig3_rpair_b `make_reg_pair_w_pi(final_ig3_rbp_index)
`define get_final_ig3_rpair_c `make_reg_pair_w_pi(final_ig3_rcp_index)


`define get_final_ig5_reg_a cpu_regs[final_ig5_ra_index]
`define get_final_ig5_rpair_b `make_reg_pair_w_pi(final_ig5_rbp_index)
`define get_final_ig5_rpair_a `make_reg_pair_w_pi(final_ig5_ra_index)


`define get_alu_out_8 ( alu_out_lo )
`define get_alu_out_16 ( { alu_out_hi, alu_out_lo } )


//task write_reg_after_alu_op;
//	
//endtask

task finish_alu_op_with_dest_reg;
	if ( alu_dest_reg_was_modded )
	begin
		cpu_regs[alu_dest_reg_index] <= `get_alu_out_8;
	end
	true_proc_flags <= alu_proc_flags_out;
endtask

task finish_alu_op_with_dest_rpair;
	if ( alu_dest_rpair_was_modded )
	begin
		`make_reg_pair_w_pi(alu_dest_rpair_index) <= `get_alu_out_16;
	end
	true_proc_flags <= alu_proc_flags_out;
endtask

task start_exec_shared_non_ldst_suffix;
	if (!non_bc_instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_generic();
	end
	
	else // if (non_bc_instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
endtask

task exec_ig4_branch;
	// If it's negative
	if (final_ig4_imm_value_8[`instr_g4_imm_value_msb_pos])
	begin
		`get_cpu_rp_pc <= `get_cpu_rp_pc
			+ { 8'hff, final_ig4_imm_value_8 };
	end
	else //if (!final_ig4_imm_value_8[`instr_g4_imm_value_msb_pos])
	begin
		`get_cpu_rp_pc <= `get_cpu_rp_pc + final_ig4_imm_value_8;
	end
endtask

task start_exec_instr_from_grp_1;
	
	//$display( "start_exec_instr_from_grp_1 is unfinished\t\t%h", 
	//	ig1_instr_changes_pc );
	//$display( "start_exec_instr_from_grp_1 is unfinished\t\t%h\t\t%h", 
	//	final_ig1_opcode, non_bc_instr_possibly_changes_pc );
	//$display( "%h, %h", instr_in_hi, final_ig1_opcode );
	//$display( "group 1 instr:\t\t%h\t\t%h", final_ig1_opcode, 
	//	non_bc_instr_possibly_changes_pc );
	
	//$display( ig1_opcode == pkg_instr_dec::instr_g1_op_addi );
	
	
	disassemble_grp_1_instr();
	
	case (final_ig1_opcode)
		// Arithmetic instructions:
		pkg_instr_dec::instr_g1_op_addi:
		begin
			//$display( "addi r%d, $%h", final_ig1_ra_index,
			//	final_ig1_imm_value_8 );
			
			//cpu_regs[final_ig1_ra_index] <= cpu_regs[final_ig1_ra_index]
			//	+ final_ig1_imm_value_8;
			
			//$display( "%h %h %h", alu_was_used
			
			//cpu_regs[final_ig1_ra_index]
			//`get_final_ig1_reg_a <= `get_alu_out_8;
			//
			//true_proc_flags
			finish_alu_op_with_dest_reg();
		end
		
		pkg_instr_dec::instr_g1_op_adci:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		pkg_instr_dec::instr_g1_op_cmpi:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		//Copy instructions:
		
		// (CoPY Immediate)
		pkg_instr_dec::instr_g1_op_cpyi:
		begin
			`get_final_ig1_reg_a <= final_ig1_imm_value_8;
		end
		
		default:
		begin
			$display("Unknown group 1 instruction!");
		end
	endcase
	
	
	if (!final_ig1_instr_is_ldst)
	begin
		start_exec_shared_non_ldst_suffix();
	end
	
	
	
	
	
endtask

task start_exec_instr_from_grp_2;
	//$display( "start_exec_instr_from_grp_2 is unfinished\t\t%h\t\t%h", 
	//	ig2_opcode, non_bc_instr_possibly_changes_pc );
	
	//$display( "%h %h %h", temp_ipc_pc_vec, ( temp_ipc_pc_vec != 0 ), 
	//	non_bc_instr_possibly_changes_pc );
	//$display( "group 2 instr:\t\t%h\t\t%h", final_ig2_opcode, 
	//	non_bc_instr_possibly_changes_pc );
	
	//$display( "%h  r%h<p>, r%h<p>", final_ig2_opcode, final_ig2_ra_index,
	//	final_ig2_rb_index );
	
	disassemble_grp_2_instr();
	
	case (final_ig2_opcode)
		
		// Arithmetic instructions:
		pkg_instr_dec::instr_g2_op_add:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_adc:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		pkg_instr_dec::instr_g2_op_sub:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_sbc:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		pkg_instr_dec::instr_g2_op_cmp:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		// Bitwise instructions with two register operands:
		pkg_instr_dec::instr_g2_op_and:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_orr:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_xor:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		// Complement instructions with one register operand (rB ignored):
		pkg_instr_dec::instr_g2_op_inv:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_invp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_neg:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_negp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		
		
		// Bitshifting (and rotating) instructions that use the value of rB
		// as the number of bits to shift by:
		pkg_instr_dec::instr_g2_op_lsl:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_lsr:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_asr:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_rol:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_ror:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		
		// Bit rotating instructions that use carry as bit 8 for a 9-bit
		// rotate of { carry, rA } by one bit:
		pkg_instr_dec::instr_g2_op_rolc:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_rorc:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		
		// Bitshifting (and rotating) instructions that do a 16-bit shift
		// or rotate on the reg pair rAp, using rB as the number of bits to
		// shift by:
		pkg_instr_dec::instr_g2_op_lslp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_lsrp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_asrp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_rolp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_rorp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		
		
		// Bit rotating instructions that use carry as bit 16 for a 17-bit
		// rotate of { carry, rAp } by one bit:
		pkg_instr_dec::instr_g2_op_rolcp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_rorcp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		
		// Copy instructions:
		
		// (CoPY from reg rB to reg rA)
		pkg_instr_dec::instr_g2_op_cpy:
		begin
			`get_final_ig2_reg_a <= `get_final_ig2_reg_b;
		end
		
		// (CoPY from reg Pair rBp to reg Pair rAp)
		pkg_instr_dec::instr_g2_op_cpyp:
		begin
			`get_final_ig2_rpair_a <= `get_final_ig2_rpair_b;
		end
		
		
		// Swap instructions:
		// (SWap register Pair, also can be used as a combined "call",
		// "jump", and "return" instruction by swapping some other register
		// pair with the "pc" [r14p] register pair)
		pkg_instr_dec::instr_g2_op_swp:
		begin
			// Non-blocking assignments are great
			`get_final_ig2_rpair_a <= `get_final_ig2_rpair_b;
			`get_final_ig2_rpair_b <= `get_final_ig2_rpair_a;
		end
		
		
		// Call instruction (Description:  sets the link register to the
		// return address, then sets the program counter to the address
		// contained in the reg pair rAp):
		
		// (CALL subroutine at address in reg pair rAp)
		pkg_instr_dec::instr_g2_op_call:
		begin
			`get_cpu_rp_lr <= `get_pc_after_reg_instr; 
			`get_cpu_rp_pc <= `get_final_ig2_rpair_a;
		end
		
		
		// 8-bit Load/store instructions:
		
		// (LoaD contents into Register rA from memory at address in rBp)
		pkg_instr_dec::instr_g2_op_ldr:
		begin
			prep_load_8_with_addr(`get_final_ig2_rpair_b);
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		// (STore Register rA contents to memory at address in rBp)
		pkg_instr_dec::instr_g2_op_str :
		begin
			prep_store_8( `get_final_ig2_reg_a, `get_final_ig2_rpair_b );
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		default:
		begin
			$display("Illegal Group 2 Instruction!");
		end
		
	endcase
	
	if (!final_ig2_instr_is_ldst)
	begin
		start_exec_shared_non_ldst_suffix();
	end
	
endtask

task start_exec_instr_from_grp_3;
	//$display( "start_exec_instr_from_grp_3 is unfinished\t\t%h\t\t%h", 
	//	final_ig3_opcode, non_bc_instr_possibly_changes_pc );
	//$display( "group 3 instr:\t\t%h\t\t%h", final_ig3_opcode, 
	//	non_bc_instr_possibly_changes_pc );
	
	disassemble_grp_3_instr();
	
	case (final_ig3_opcode)
		// Indexed Load/store instructions:
		
		// Load 8-bit value from memory at address [rBp + rCp] into rA
		pkg_instr_dec::instr_g3_op_ldrx:
		begin
			//$display( "ldrx:  %h %h", final_ig3_rbp_index,
			//	final_ig3_rcp_index );
			prep_load_8_with_addr( `get_final_ig3_rpair_b 
				+ `get_final_ig3_rpair_c );
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		// Store rA to memory at address [rBp + rCp]
		pkg_instr_dec::instr_g3_op_strx:
		begin
			//$display( "strx:  %d %d %d\t\t%h %h %h", final_ig3_ra_index,
			//	final_ig3_rbp_index, final_ig3_rcp_index, 
			//	`get_final_ig3_reg_a, `get_final_ig3_rpair_b, 
			//	`get_final_ig3_rpair_c );
			//$display( "%d %d\t\t%d %d", final_ig3_rbp_index, 
			//	final_ig3_rcp_index,
			//	`make_reg_ind_from_pi(final_ig3_rbp_index), 
			//	`make_reg_ind_from_pi(final_ig3_rcp_index) );
			prep_store_8( `get_final_ig3_reg_a, ( `get_final_ig3_rpair_b 
				+ `get_final_ig3_rpair_c ) );
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		default:
		begin
			$display("Illegal Group 3 Instruction!");
		end
	endcase
	
	if (!final_ig3_instr_is_ldst)
	begin
		start_exec_shared_non_ldst_suffix();
	end
	
endtask

task start_exec_instr_from_grp_4;
	//$display( "start_exec_instr_from_grp_4 is unfinished\t\t%h\t\t%h", 
	//	final_ig4_opcode, non_bc_instr_possibly_changes_pc );
	//$display( "group 4 instr:\t\t%h\t\t%h", final_ig4_opcode, 
	//	non_bc_instr_possibly_changes_pc );
	
	disassemble_grp_4_instr();
	
	// Branching instructions (note that iiii iiii is a SIGNED 8-bit
	// integer):
	
	// (branch always)
	case (final_ig4_opcode)
		pkg_instr_dec::instr_g4_op_bra:
		begin
			exec_ig4_branch();
		end
		
		// (branch never, a form of NOP)
		pkg_instr_dec::instr_g4_op_bnv:
		begin
			// Wait a cycle
		end
		
		// (branch when Z == 0)
		pkg_instr_dec::instr_g4_op_bne:
		begin
			if (!true_proc_flags[pkg_pflags::pf_slot_z])
			begin
				exec_ig4_branch();
			end
		end
		
		// (branch when Z == 1)
		pkg_instr_dec::instr_g4_op_beq:
		begin
			if (true_proc_flags[pkg_pflags::pf_slot_z])
			begin
				exec_ig4_branch();
			end
		end
		
		// (branch when C == 0 [unsigned greater than or equal])
		pkg_instr_dec::instr_g4_op_bcc:
		begin
			if (!true_proc_flags[pkg_pflags::pf_slot_c])
			begin
				exec_ig4_branch();
			end
		end
		
		// (branch when C == 1 [unsigned less than])
		pkg_instr_dec::instr_g4_op_bcs:
		begin
			if (true_proc_flags[pkg_pflags::pf_slot_c])
			begin
				exec_ig4_branch();
			end
		end
		
		// (branch when ( ( C == 1 and Z == 0 ) or ( Z == 1 ) )
		// [unsigned less than or equal])
		pkg_instr_dec::instr_g4_op_bls:
		begin
			if ( ( true_proc_flags[pkg_pflags::pf_slot_c]
				&& !true_proc_flags[pkg_pflags::pf_slot_z] )
				||  true_proc_flags[pkg_pflags::pf_slot_z] )
			begin
				exec_ig4_branch();
			end
		end
		
		// (branch when C == 0 and Z == 0 [unsigned greater than])
		pkg_instr_dec::instr_g4_op_bhi:
		begin
			if ( !true_proc_flags[pkg_pflags::pf_slot_c]
				&& !true_proc_flags[pkg_pflags::pf_slot_z] )
			begin
				exec_ig4_branch();
			end
		end
		
		default:
		begin
			$display("Illegal Group 4 Instruction!");
		end
		
	endcase
	
	
	if (!final_ig4_instr_is_ldst)
	begin
		start_exec_shared_non_ldst_suffix();
	end
	
endtask

task start_exec_instr_from_grp_5;
	//$display( "start_exec_instr_from_grp_5 is unfinished\t\t%h\t\t%h", 
	//	final_ig5_opcode, non_bc_instr_possibly_changes_pc );
	//$display( "group 5 instr:\t\t%h\t\t%h", final_ig5_opcode, 
	//	non_bc_instr_possibly_changes_pc );
	
	disassemble_grp_5_instr();
	
	//if ( final_ig5_opcode == pkg_instr_dec::instr_g5_op_cpypi )
	//begin
	//	//$display( "%h %h %h %h", final_ig5_other_rap_index,
	//	//	final_ig5_rap_is_pc, instr_in_lo,
	//	//	non_bc_instr_possibly_changes_pc );
	//	$display( "%h %h", final_ig5_ra_index, instr_in_lo );
	//	`make_reg_pair_w_pi(final_ig5_ra_index) <= instr_in_lo;
	//end
	
	case (final_ig5_opcode)
		
		// Extended copy instructions:
		
		// (COPY Pair Immediate, which sets the a register pair rAp to a
		// 16-bit value in one instruction, but in twice the number of
		// cycles due to using more than two bytes [can be used a as a jump
		// immediate by copying a 16-bit immediate value to the pc] [this
		// instruction ONLY has an advantage over using two successive cpyi
		// instructions when used to copy a 16-bit immediate value to the
		// pc])
		pkg_instr_dec::instr_g5_op_cpypi:
		begin
			`get_final_ig5_rpair_a <= instr_in_lo;
		end
		
		// Call instructions
		
		// (CALL Immediate, which sets the link register to the return
		// address, then sets the program counter to the destination
		// address)
		pkg_instr_dec::instr_g5_op_calli:
		begin
			`get_cpu_rp_lr <= `get_pc_after_reg_instr;
			`get_cpu_rp_pc <= instr_in_lo;
		end
		
		// Indexed Load/store instructions:
		
		// (Load 8-bit value from memory at address [rBp + 16-bit Immediate
		// value] into rA)
		pkg_instr_dec::instr_g5_op_ldrxi:
		begin
			prep_load_8_with_addr( `get_final_ig5_rpair_b
				+ instr_in_lo );
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		// (Store rA to memory at address [rBp + 16-bit Immediate value])
		pkg_instr_dec::instr_g5_op_strxi:
		begin
			prep_store_8( `get_final_ig5_reg_a, ( `get_final_ig5_rpair_b 
				+ instr_in_lo ) );
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		default:
		begin
			$display("Illegal Group 5 Instruction!");
		end
		
	endcase
	
	if (!final_ig5_instr_is_ldst)
	begin
		start_exec_shared_non_ldst_suffix();
	end
	
endtask


// Start executing an instruction.  The instruction MAY only take one cycle
// after being loaded.
task start_exec_instr;
	//$display("start_exec_instr()");
	
	case (final_instr_grp)
		pkg_instr_dec::instr_grp_1:
		begin
			start_exec_instr_from_grp_1();
		end
		
		pkg_instr_dec::instr_grp_2:
		begin
			start_exec_instr_from_grp_2();
		end
		
		pkg_instr_dec::instr_grp_3:
		begin
			start_exec_instr_from_grp_3();
		end
		
		pkg_instr_dec::instr_grp_4:
		begin
			start_exec_instr_from_grp_4();
		end
		
		pkg_instr_dec::instr_grp_5:
		begin
			start_exec_instr_from_grp_5();
		end
	endcase
endtask






// Finish executing a instruction (second execution cycle of a multi-cycle
// instruction)
task finish_exec_ldst_instr;
	//debug_disp_instr();
	//$display();
	
	case (final_instr_grp)
		pkg_instr_dec::instr_grp_1:
		begin
			$display( "finish_exec_ldst_instr:  Uh oh!  Invalid Group 1 ",
				"Load Instruction!" );
		end
		
		pkg_instr_dec::instr_grp_2:
		begin
			case (final_ig2_opcode)
				pkg_instr_dec::instr_g2_op_ldr:
				begin
					`get_final_ig2_reg_a <= temp_data_in;
				end
				pkg_instr_dec::instr_g2_op_str:
				begin
					// Wait a cycle
				end
				
				default:
				begin
					$display( "finish_exec_ldst_instr:  Uh oh!  Invalid ",
						"Group 2 Load Instruction!" );
				end
			endcase
		end
		
		pkg_instr_dec::instr_grp_3:
		begin
			case (final_ig3_opcode)
				pkg_instr_dec::instr_g3_op_ldrx:
				begin
					$display( "ldrx:  %h %h", final_ig3_ra_index,
						temp_data_in );
					`get_final_ig3_reg_a <= temp_data_in;
				end
				
				pkg_instr_dec::instr_g3_op_strx:
				begin
					// Wait a cycle
				end
				
				default:
				begin
					$display( "finish_exec_ldst_instr:  Uh oh!  Invalid ",
						"Group 5 Load Instruction!" );
				end
			endcase
		end
		
		pkg_instr_dec::instr_grp_4:
		begin
			$display( "finish_exec_ldst_instr:  Uh oh!  Invalid Group 4 ",
				"Load Instruction!" );
		end
		
		pkg_instr_dec::instr_grp_5:
		begin
			case (final_ig5_opcode)
				pkg_instr_dec::instr_g5_op_ldrxi:
				begin
					`get_final_ig5_reg_a <= temp_data_in;
				end
				
				pkg_instr_dec::instr_g5_op_strxi:
				begin
					// Wait a cycle
				end
				
				default:
				begin
					$display( "finish_exec_ldst_instr:  Uh oh!  Invalid ",
						"Group 5 Load Instruction!" );
				end
			endcase
		end
	endcase
	
	
	if (!non_bc_instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_generic();
	end
	
	else // if (non_bc_instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
endtask



`endif		// instr_exec_tasks_svinc
