// This file is part of Small Practice CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Small Practice CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Small Practice CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Small Practice CPU.  If not, see <http://www.gnu.org/licenses/>.


`ifndef instr_exec_tasks_svinc
`define instr_exec_tasks_svinc


task start_exec_instr_from_grp_1;
	
	//$display( "start_exec_instr_from_grp_1 is unfinished\t\t%h", 
	//	ig1_instr_changes_pc );
	//$display( "start_exec_instr_from_grp_1 is unfinished\t\t%h\t\t%h", 
	//	final_ig1_opcode, instr_possibly_changes_pc );
	//$display( "%h, %h", instr_in_hi, final_ig1_opcode );
	//$display( "group 1 instr:\t\t%h\t\t%h", final_ig1_opcode, 
	//	instr_possibly_changes_pc );
	
	//$display( ig1_opcode == pkg_instr_dec::instr_g1_op_addi );
	
	
	disassemble_grp_1_instr();
	
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
	
	
	
	
endtask

task start_exec_instr_from_grp_2;
	//$display( "start_exec_instr_from_grp_2 is unfinished\t\t%h\t\t%h", 
	//	ig2_opcode, instr_possibly_changes_pc );
	
	//$display( "%h %h %h", temp_ipc_pc_vec, ( temp_ipc_pc_vec != 0 ), 
	//	instr_possibly_changes_pc );
	//$display( "group 2 instr:\t\t%h\t\t%h", final_ig2_opcode, 
	//	instr_possibly_changes_pc );
	
	//$display( "%h  r%h<p>, r%h<p>", final_ig2_opcode, final_ig2_ra_index,
	//	final_ig2_rb_index );
	
	disassemble_grp_2_instr();
	
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
endtask

task start_exec_instr_from_grp_3;
	//$display( "start_exec_instr_from_grp_3 is unfinished\t\t%h\t\t%h", 
	//	final_ig3_opcode, instr_possibly_changes_pc );
	//$display( "group 3 instr:\t\t%h\t\t%h", final_ig3_opcode, 
	//	instr_possibly_changes_pc );
	
	disassemble_grp_3_instr();
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
endtask

task start_exec_instr_from_grp_4;
	//$display( "start_exec_instr_from_grp_4 is unfinished\t\t%h\t\t%h", 
	//	final_ig4_opcode, instr_possibly_changes_pc );
	//$display( "group 4 instr:\t\t%h\t\t%h", final_ig4_opcode, 
	//	instr_possibly_changes_pc );
	
	disassemble_grp_4_instr();
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
endtask

task start_exec_instr_from_grp_5;
	//$display( "start_exec_instr_from_grp_5 is unfinished\t\t%h\t\t%h", 
	//	final_ig5_opcode, instr_possibly_changes_pc );
	//$display( "group 5 instr:\t\t%h\t\t%h", final_ig5_opcode, 
	//	instr_possibly_changes_pc );
	
	disassemble_grp_5_instr();
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
endtask


// Start executing an instruction.  The instruction MAY only take one
// cycle after being loaded.
task start_exec_instr;
	//$display("start_exec_instr()");
	
	case (final_instr_grp)
		pkg_instr_dec::instr_grp_1:
		begin
			start_exec_instr_from_grp_1();
		end
		
		pkg_instr_dec::instr_grp_2:
		begin
			start_exec_instr_from_grp_2();
		end
		
		pkg_instr_dec::instr_grp_3:
		begin
			start_exec_instr_from_grp_3();
		end
		
		pkg_instr_dec::instr_grp_4:
		begin
			start_exec_instr_from_grp_4();
		end
		
		pkg_instr_dec::instr_grp_5:
		begin
			start_exec_instr_from_grp_5();
		end
	endcase
endtask





task finish_exec_instr_from_grp_1;
	$display("finish_exec_instr_from_grp_1 is unfinished");
endtask

task finish_exec_instr_from_grp_2;
	$display("finish_exec_instr_from_grp_2 is unfinished");
endtask

task finish_exec_instr_from_grp_3;
	$display("finish_exec_instr_from_grp_3 is unfinished");
endtask

task finish_exec_instr_from_grp_4;
	$display("finish_exec_instr_from_grp_4 is unfinished");
endtask

task finish_exec_instr_from_grp_5;
	$display("finish_exec_instr_from_grp_5 is unfinished");
endtask

// Finish executing a instruction (second execution cycle of a multi-cycle
// instruction)
task finish_exec_instr;
	//debug_disp_instr();
	//$display();
	
	case (final_instr_grp)
		pkg_instr_dec::instr_grp_1:
		begin
			finish_exec_instr_from_grp_1();
		end
		
		pkg_instr_dec::instr_grp_2:
		begin
			finish_exec_instr_from_grp_2();
		end
		
		pkg_instr_dec::instr_grp_3:
		begin
			finish_exec_instr_from_grp_3();
		end
		
		pkg_instr_dec::instr_grp_4:
		begin
			finish_exec_instr_from_grp_4();
		end
		
		pkg_instr_dec::instr_grp_5:
		begin
			finish_exec_instr_from_grp_5();
		end
	endcase
	
	// After finishing an instruction, the next step should ALWAYS be to
	// load another instruction.
	//curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	
endtask



`endif		// instr_exec_tasks_svinc
