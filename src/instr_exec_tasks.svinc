// This file is part of Small Practice CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Small Practice CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Small Practice CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Small Practice CPU.  If not, see <http://www.gnu.org/licenses/>.


`ifndef instr_exec_tasks_svinc
`define instr_exec_tasks_svinc


`define get_final_ig1_reg_a cpu_regs[final_ig1_ra_index]

`define get_final_ig2_reg_a cpu_regs[final_ig2_ra_index]
`define get_final_ig2_reg_b cpu_regs[final_ig2_rb_index]
`define get_final_ig2_rpair_a `make_reg_pair_w_pi(final_ig2_ra_index)
`define get_final_ig2_rpair_b `make_reg_pair_w_pi(final_ig2_rb_index)

`define get_final_ig3_reg_a cpu_regs[final_ig3_ra_index]

`define get_final_ig5_reg_a cpu_regs[final_ig5_ra_index]
`define get_final_ig5_rpair_a `make_reg_pair_w_pi(final_ig5_ra_index)


`define get_alu_out_8 ( alu_out_lo )
`define get_alu_out_16 ( { alu_out_hi, alu_out_lo } )


//task write_reg_after_alu_op;
//	
//endtask

task finish_alu_op_with_dest_reg;
	if ( alu_dest_reg_was_modded )
	begin
		cpu_regs[alu_dest_reg_index] <= `get_alu_out_8;
	end
	true_proc_flags <= alu_proc_flags_out;
endtask

task finish_alu_op_with_dest_rpair;
	if ( alu_dest_rpair_was_modded )
	begin
		`make_reg_pair_w_pi(alu_dest_rpair_index) <= `get_alu_out_16;
	end
	true_proc_flags <= alu_proc_flags_out;
endtask


task start_exec_instr_from_grp_1;
	
	//$display( "start_exec_instr_from_grp_1 is unfinished\t\t%h", 
	//	ig1_instr_changes_pc );
	//$display( "start_exec_instr_from_grp_1 is unfinished\t\t%h\t\t%h", 
	//	final_ig1_opcode, instr_possibly_changes_pc );
	//$display( "%h, %h", instr_in_hi, final_ig1_opcode );
	//$display( "group 1 instr:\t\t%h\t\t%h", final_ig1_opcode, 
	//	instr_possibly_changes_pc );
	
	//$display( ig1_opcode == pkg_instr_dec::instr_g1_op_addi );
	
	
	disassemble_grp_1_instr();
	
	case (final_ig1_opcode)
		// Arithmetic instructions:
		pkg_instr_dec::instr_g1_op_addi:
		begin
			//$display( "addi r%d, $%h", final_ig1_ra_index,
			//	final_ig1_imm_value_8 );
			
			//cpu_regs[final_ig1_ra_index] <= cpu_regs[final_ig1_ra_index]
			//	+ final_ig1_imm_value_8;
			
			//$display( "%h %h %h", alu_was_used
			
			//cpu_regs[final_ig1_ra_index]
			//`get_final_ig1_reg_a <= `get_alu_out_8;
			//
			//true_proc_flags
			finish_alu_op_with_dest_reg();
		end
		
		pkg_instr_dec::instr_g1_op_adci:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		pkg_instr_dec::instr_g1_op_cmpi:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		//Copy instructions:
		
		// (CoPY Immediate)
		pkg_instr_dec::instr_g1_op_cpyi:
		begin
			`get_final_ig1_reg_a <= final_ig1_imm_value_8;
		end
		
		default:
		begin
			$display("Unknown group 1 instruction!");
		end
	endcase
	
	
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
	
	
	
	
endtask

task start_exec_instr_from_grp_2;
	//$display( "start_exec_instr_from_grp_2 is unfinished\t\t%h\t\t%h", 
	//	ig2_opcode, instr_possibly_changes_pc );
	
	//$display( "%h %h %h", temp_ipc_pc_vec, ( temp_ipc_pc_vec != 0 ), 
	//	instr_possibly_changes_pc );
	//$display( "group 2 instr:\t\t%h\t\t%h", final_ig2_opcode, 
	//	instr_possibly_changes_pc );
	
	//$display( "%h  r%h<p>, r%h<p>", final_ig2_opcode, final_ig2_ra_index,
	//	final_ig2_rb_index );
	
	disassemble_grp_2_instr();
	
	case (final_ig2_opcode)
		
		// Arithmetic instructions:
		pkg_instr_dec::instr_g2_op_add:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_adc:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		pkg_instr_dec::instr_g2_op_sub:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_sbc:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		pkg_instr_dec::instr_g2_op_cmp:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		// Bitwise instructions with two register operands:
		pkg_instr_dec::instr_g2_op_and:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_orr:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_xor:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		// Complement instructions with one register operand (rB ignored):
		pkg_instr_dec::instr_g2_op_inv:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_invp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_neg:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_negp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		
		
		// Bitshifting (and rotating) instructions that use the value of rB
		// as the number of bits to shift by:
		pkg_instr_dec::instr_g2_op_lsl:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_lsr:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_asr:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_rol:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_ror:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		
		// Bit rotating instructions that use carry as bit 8 for a 9-bit
		// rotate of { carry, rA } by one bit:
		pkg_instr_dec::instr_g2_op_rolc:
		begin
			finish_alu_op_with_dest_reg();
		end
		pkg_instr_dec::instr_g2_op_rorc:
		begin
			finish_alu_op_with_dest_reg();
		end
		
		
		// Bitshifting (and rotating) instructions that do a 16-bit shift
		// or rotate on the reg pair rAp, using rB as the number of bits to
		// shift by:
		pkg_instr_dec::instr_g2_op_lslp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_lsrp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_asrp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_rolp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_rorp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		
		
		// Bit rotating instructions that use carry as bit 16 for a 17-bit
		// rotate of { carry, rAp } by one bit:
		pkg_instr_dec::instr_g2_op_rolcp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		pkg_instr_dec::instr_g2_op_rorcp:
		begin
			finish_alu_op_with_dest_rpair();
		end
		
		// Copy instructions:
		
		// (CoPY from reg rB to reg rA)
		pkg_instr_dec::instr_g2_op_cpy:
		begin
			`get_final_ig2_reg_a <= `get_final_ig2_reg_b;
		end
		
		// (CoPY from reg Pair rBp to reg Pair rAp)
		pkg_instr_dec::instr_g2_op_cpyp:
		begin
			`get_final_ig2_rpair_a <= `get_final_ig2_rpair_b;
		end
		
		
		// Swap instructions:
		// (SWap register Pair, also can be used as a combined "call",
		// "jump", and "return" instruction by swapping some other register
		// pair with the "pc" [r14p] register pair)
		pkg_instr_dec::instr_g2_op_swp:
		begin
			// Non-blocking assignments are great
			`get_final_ig2_rpair_a <= `get_final_ig2_rpair_b;
			`get_final_ig2_rpair_b <= `get_final_ig2_rpair_a;
		end
		
		
		// Call instruction (Description:  sets the link register to the
		// return address, then sets the program counter to the address
		// contained in the reg pair rAp):
		
		// (CALL subroutine at address in reg pair rAp)
		pkg_instr_dec::instr_g2_op_call:
		begin
			`get_cpu_rp_lr <= `get_pc_after_reg_instr_16; 
			`get_cpu_rp_pc <= ( `get_final_ig2_rpair_a - 
				`instr_16_num_bytes );
		end
		
		
		// 8-bit Load/store instructions:
		
		// (LoaD contents into Register rA from memory at address in rBp)
		pkg_instr_dec::instr_g2_op_ldr:
		begin
			//prep_load_8_with_addr(`get_final_ig
		end
		
		// (STore Register rA contents to memory at address in rBp)
		pkg_instr_dec::instr_g2_op_str :
		begin
			
		end
		
	endcase
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
endtask

task start_exec_instr_from_grp_3;
	//$display( "start_exec_instr_from_grp_3 is unfinished\t\t%h\t\t%h", 
	//	final_ig3_opcode, instr_possibly_changes_pc );
	//$display( "group 3 instr:\t\t%h\t\t%h", final_ig3_opcode, 
	//	instr_possibly_changes_pc );
	
	disassemble_grp_3_instr();
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
endtask

task start_exec_instr_from_grp_4;
	//$display( "start_exec_instr_from_grp_4 is unfinished\t\t%h\t\t%h", 
	//	final_ig4_opcode, instr_possibly_changes_pc );
	//$display( "group 4 instr:\t\t%h\t\t%h", final_ig4_opcode, 
	//	instr_possibly_changes_pc );
	
	disassemble_grp_4_instr();
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
endtask

task start_exec_instr_from_grp_5;
	//$display( "start_exec_instr_from_grp_5 is unfinished\t\t%h\t\t%h", 
	//	final_ig5_opcode, instr_possibly_changes_pc );
	//$display( "group 5 instr:\t\t%h\t\t%h", final_ig5_opcode, 
	//	instr_possibly_changes_pc );
	
	disassemble_grp_5_instr();
	
	if ( final_ig5_opcode == pkg_instr_dec::instr_g5_op_cpypi )
	begin
		//$display( "%h %h %h %h", final_ig5_other_rap_index,
		//	final_ig5_rap_is_pc, instr_in_lo, instr_possibly_changes_pc );
		$display( "%h %h", final_ig5_ra_index, instr_in_lo );
		`make_reg_pair_w_pi(final_ig5_ra_index) <= instr_in_lo;
	end
	
	if (!instr_possibly_changes_pc)
	begin
		prep_load_instr_hi_reg_generic();
	end
	
	else // if (instr_possibly_changes_pc)
	begin
		prep_update_pc_etc_after_ipc();
	end
	
endtask


// Start executing an instruction.  The instruction MAY only take one
// cycle after being loaded.
task start_exec_instr;
	//$display("start_exec_instr()");
	
	case (final_instr_grp)
		pkg_instr_dec::instr_grp_1:
		begin
			start_exec_instr_from_grp_1();
		end
		
		pkg_instr_dec::instr_grp_2:
		begin
			start_exec_instr_from_grp_2();
		end
		
		pkg_instr_dec::instr_grp_3:
		begin
			start_exec_instr_from_grp_3();
		end
		
		pkg_instr_dec::instr_grp_4:
		begin
			start_exec_instr_from_grp_4();
		end
		
		pkg_instr_dec::instr_grp_5:
		begin
			start_exec_instr_from_grp_5();
		end
	endcase
endtask





task finish_exec_instr_from_grp_1;
	$display("finish_exec_instr_from_grp_1 is unfinished");
endtask

task finish_exec_instr_from_grp_2;
	$display("finish_exec_instr_from_grp_2 is unfinished");
endtask

task finish_exec_instr_from_grp_3;
	$display("finish_exec_instr_from_grp_3 is unfinished");
endtask

task finish_exec_instr_from_grp_4;
	$display("finish_exec_instr_from_grp_4 is unfinished");
endtask

task finish_exec_instr_from_grp_5;
	$display("finish_exec_instr_from_grp_5 is unfinished");
endtask

// Finish executing a instruction (second execution cycle of a multi-cycle
// instruction)
task finish_exec_instr;
	//debug_disp_instr();
	//$display();
	
	case (final_instr_grp)
		pkg_instr_dec::instr_grp_1:
		begin
			finish_exec_instr_from_grp_1();
		end
		
		pkg_instr_dec::instr_grp_2:
		begin
			finish_exec_instr_from_grp_2();
		end
		
		pkg_instr_dec::instr_grp_3:
		begin
			finish_exec_instr_from_grp_3();
		end
		
		pkg_instr_dec::instr_grp_4:
		begin
			finish_exec_instr_from_grp_4();
		end
		
		pkg_instr_dec::instr_grp_5:
		begin
			finish_exec_instr_from_grp_5();
		end
	endcase
	
	// After finishing an instruction, the next step should ALWAYS be to
	// load another instruction.
	//curr_state <= pkg_cpu::cpu_st_load_instr_hi;
	
endtask



`endif		// instr_exec_tasks_svinc
