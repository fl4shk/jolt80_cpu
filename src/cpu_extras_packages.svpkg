// This file is part of Small Practice CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Small Practice CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Small Practice CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Small Practice CPU.  If not, see <http://www.gnu.org/licenses/>.

`include "src/instr_decoder_defines.svinc"
//`include "src/cpu_extras_defines.svinc"

package pkg_cpu;
	
	// Special general purpose register pairs
	
	// The pc register pair occupies the register pair r14p ({ r14, r15 })
	parameter cpu_rp_pc_hi_rind = `cpu_reg_index_ie_width'd14;
	parameter cpu_rp_pc_lo_rind = `cpu_reg_index_ie_width'd15;
	
	// The register pair index of the program counter
	parameter cpu_rp_pc_pind = `cpu_rp_index_ie_width'd7;
	
	// The lr register pair occupies the register pair r12p ({ r12, r13 })
	parameter cpu_rp_lr_hi_rind = `cpu_reg_index_ie_width'd12;
	parameter cpu_rp_lr_lo_rind = `cpu_reg_index_ie_width'd13;
	
	// The register pair index of the link register
	parameter cpu_rp_lr_pind = `cpu_rp_index_ie_width'd6;
	
	
	//typedef enum bit [`cpu_state_msb_pos:0]
	//{
	//	// Load and execute a 16-bit instruction, or load the high 16 bits
	//	// of a 32-bit instruction
	//	cpu_st_load_or_exec_instr_hi,
	//	
	//	// Load the low 16 bits of a 32-bit instruction and execute the
	//	// full 32-bit instruction
	//	cpu_st_load_instr_lo_and_exec,
	//	
	//	// Load an 8-bit value from memory
	//	cpu_st_load_non_instr,
	//	
	//	// Store an 8-bit value to memory
	//	cpu_st_store,
	//	
	//	// Branches, jumps, and calls
	//	cpu_st_branch
	//	
	//} cpu_state;
	
	
	typedef enum bit [`cpu_state_msb_pos:0]
	{
		// Load a 16-bit instruction, or load the high 16 bits of a 32-bit
		// instruction
		cpu_st_load_instr_hi,
		
		// Load the low 16 bits of a 32-bit instruction
		cpu_st_load_instr_lo,
		
		// Begin executing an instruction (the instruction MAY or MAY NOT
		// finish executing on this clock cycle)
		cpu_st_start_exec_instr,
		
		// Finish executing a multi-cycle instruction (this is the second
		// cycle of instruction execution)
		cpu_st_finish_exec_instr
		
	} cpu_state;
	
	typedef enum bit
	{
		cpu_data_acc_sz_8,
		cpu_data_acc_sz_16
		
	} cpu_data_access_size;
	
	
	
endpackage



package pkg_pflags;
	
	// Two processor flags (for simplicity):  carry (c) and zero (z)
	typedef enum bit [`proc_flags_msb_pos:0] 
	{
		pf_slot_z,
		pf_slot_c
	} proc_flag_slot;
	
endpackage





