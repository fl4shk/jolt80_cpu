// This file is part of Small Practice CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Small Practice CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Small Practice CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Small Practice CPU.  If not, see <http://www.gnu.org/licenses/>.

`ifndef update_instr_possibly_changes_pc_tasks_svinc
`define update_instr_possibly_changes_pc_tasks_svinc

task update_ipc_pc_for_grp_1_instr;
	
	if (final_ig1_pc_contains_ra)
	begin
		if ( pkg_instr_dec::ig1_get_ra_instr_can_change_pc(ig1_opcode) )
		begin
			temp_ipc_pc_vec = 1;
		end
	end
	
	
endtask

task update_ipc_pc_for_grp_2_instr;
	
	//temp_ipc_pc_vec[4:0] = 0;
	
	
	// The call instruction ALWAYS changes pc
	if ( pkg_instr_dec::ig2_get_instr_definitely_changes_pc(ig2_opcode) )
	begin
		//temp_ipc_pc_vec[0] = 1;
		temp_ipc_pc_vec = 1;
	end
	
	else if (final_ig2_pc_contains_ra)
	begin
		if ( pkg_instr_dec::ig2_get_ra_instr_can_change_pc(ig2_opcode) )
		begin
			//temp_ipc_pc_vec[1] = 1;
			temp_ipc_pc_vec = 1;
		end
		
	end
	
	// Don't need to check this
	//else if (final_ig2_pc_contains_rb)
	//begin
	//	
	//end
	
	else if (final_ig2_rap_is_pc)
	begin
		if ( pkg_instr_dec::ig2_get_rap_instr_can_change_pc(ig2_opcode) )
		begin
			//temp_ipc_pc_vec[2] = 1;
			temp_ipc_pc_vec = 1;
		end
		
	end
	
	else if (final_ig2_rbp_is_pc)
	begin
		// Swap instructions:
		if ( pkg_instr_dec::ig2_get_rbp_instr_can_change_pc(ig2_opcode) )
		begin
			//temp_ipc_pc_vec[3] = 1;
			temp_ipc_pc_vec = 1;
		end
	end
	
	//$display( "%h", temp_ipc_pc_vec );
	//$display( "%h", temp_ipc_pc_vec != 0 );
	
	//instr_possibly_changes_pc = ( temp_ipc_pc_vec != 0 );
	
	
endtask

task update_ipc_pc_for_grp_3_instr;
	if (final_ig3_pc_contains_ra)
	begin
		if ( pkg_instr_dec::ig3_get_ra_instr_can_change_pc(ig3_opcode) )
		begin
			temp_ipc_pc_vec = 1;
		end
	end
	
endtask

// ALL Instructions in group 4 change the PC
task update_ipc_pc_for_grp_4_instr;
	temp_ipc_pc_vec[0] = 1;
endtask

task update_ipc_pc_for_grp_5_instr;
	if ( pkg_instr_dec::ig5_get_instr_definitely_changes_pc
		(final_ig5_opcode) )
	begin
		temp_ipc_pc_vec[0] = 1;
	end
	
	if (final_ig5_pc_contains_ra)
	begin
		if ( pkg_instr_dec::ig5_get_ra_instr_can_change_pc
			(final_ig5_opcode) )
		begin
			temp_ipc_pc_vec[1] = 1;
		end
	end
	
	else if (final_ig5_rap_is_pc)
	begin
		if ( pkg_instr_dec::ig5_get_rap_instr_can_change_pc(ig5_opcode) )
		begin
			temp_ipc_pc_vec[2] = 1;
		end
	end
	
	// Don't need to check this
	//else if (final_ig5_rbp_is_pc)
	//begin
	//	
	//end
	
endtask


`endif		// update_instr_possibly_changes_pc_tasks_svinc
