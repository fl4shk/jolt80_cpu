// This file is part of Small Practice CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Small Practice CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Small Practice CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Small Practice CPU.  If not, see <http://www.gnu.org/licenses/>.

`ifndef instr_g3_tasks_svinc
`define instr_g3_tasks_svinc


`define get_final_ig3_reg_a cpu_regs[final_ig3_ra_index]
`define get_final_ig3_rpair_b `make_reg_pair_w_pi(final_ig3_rbp_index)
`define get_final_ig3_rpair_c `make_reg_pair_w_pi(final_ig3_rcp_index)


task debug_disp_init_instr_from_grp_3;
	$display( "Group 3:  %h %h %h %h", ig3_opcode, ig3_ra_index, 
		ig3_rbp_index, ig3_rcp_index );
endtask

task debug_disp_final_instr_from_grp_3;
	$display( "Group 3:  %h %h %h %h", final_ig3_opcode, 
		final_ig3_ra_index, final_ig3_rbp_index, final_ig3_rcp_index );
endtask

task disassemble_grp_3_instr;
	
	// Indexed Load/store instructions:
	
	//$display( "final_ig3_opcode:  %d", final_ig3_opcode );
	// Load 8-bit value from memory at address [rBp + rCp] into rA
	if ( final_ig3_opcode == pkg_instr_dec::instr_g3_op_ldrx )
	begin
		$display( "ldrx r%d, r%dp, r%dp", final_ig3_ra_index,
			`make_reg_ind_from_pi(final_ig3_rbp_index), 
			`make_reg_ind_from_pi(final_ig3_rcp_index) );
	end
	
	// Store rA to memory at address [rBp + rCp]
	else if ( final_ig3_opcode == pkg_instr_dec::instr_g3_op_strx )
	begin
		$display( "strx r%d, r%dp, r%dp", final_ig3_ra_index,
			`make_reg_ind_from_pi(final_ig3_rbp_index), 
			`make_reg_ind_from_pi(final_ig3_rcp_index) );
	end
	
	else
	begin
		$display("Unknown group 3 instruction!");
	end
	
endtask

//task update_ipc_pc_for_grp_3_instr;
//task update_grp_3_instr_is_bc;
task update_instr_is_bc_for_grp_3_instr;
	//if (final_ig3_pc_contains_ra)
	//begin
	//	if ( pkg_instr_dec::ig3_get_ra_instr_can_change_pc(ig3_opcode) )
	//	begin
	//		non_bc_instr_possibly_changes_pc = 1;
	//	end
	//end
	
endtask



task back_up_ig3_instr_contents;
	{ final_ig3_opcode, final_ig3_ra_index, final_ig3_rbp_index,
		final_ig3_rcp_index }
		<= { ig3_opcode, ig3_ra_index, ig3_rbp_index, ig3_rcp_index };
endtask


task update_extra_ig3_pc_stuff;
	final_ig3_pc_contains_ra
		<= `wire_rhs_pc_indices_contain_reg_index(ig3_ra_index);
	final_ig3_rbp_is_pc <= `wire_rhs_rp_index_is_pc_index(ig3_rbp_index);
	final_ig3_rcp_is_pc <= `wire_rhs_rp_index_is_pc_index(ig3_rcp_index);
endtask

task prep_alu_instr_grp_3_generic;
	input [`instr_g3_op_msb_pos:0] opcode;
	input [`cpu_reg_arr_msb_pos:0] ra_index;
	//input [`instr_g3_rbp_index_msb_pos:0] rbp_index;
	//input [`instr_g3_rcp_index_msb_pos:0] rcp_index;
	input [`cpu_reg_arr_msb_pos:0] rbp_index;
	input [`cpu_reg_arr_msb_pos:0] rcp_index;
	
	
	case (opcode)
		// Indexed Load/store instructions:
		
		// Load 8-bit value from memory at address [rBp + rCp] into rA
		pkg_instr_dec::instr_g3_op_ldrx:
		begin
			do_alu_op_addp_no_flags( rbp_index,
				cpu_regs[`make_reg_ind_from_pi(rcp_index)],
				cpu_regs[ `make_reg_ind_from_pi(rcp_index) + 1'b1 ]);
		end
		
		// Store rA to memory at address [rBp + rCp]
		pkg_instr_dec::instr_g3_op_strx:
		begin
			do_alu_op_addp_no_flags( rbp_index,
				cpu_regs[`make_reg_ind_from_pi(rcp_index)],
				cpu_regs[ `make_reg_ind_from_pi(rcp_index) + 1'b1 ]);
		end
		
		default:
		begin
			$display("Illegal Group 3 Instruction!");
		end
	endcase
	
endtask

task start_exec_instr_from_grp_3;
	//$display( "start_exec_instr_from_grp_3 is unfinished\t\t%h\t\t%h", 
	//	final_ig3_opcode, non_bc_instr_possibly_changes_pc );
	//$display( "group 3 instr:\t\t%h\t\t%h", final_ig3_opcode, 
	//	non_bc_instr_possibly_changes_pc );
	
	disassemble_grp_3_instr();
	
	case (final_ig3_opcode)
		// Indexed Load/store instructions:
		
		// Load 8-bit value from memory at address [rBp + rCp] into rA
		pkg_instr_dec::instr_g3_op_ldrx:
		begin
			//prep_load_8_with_addr( `get_final_ig3_rpair_b 
			//	+ `get_final_ig3_rpair_c );
			prep_load_8_with_addr(`get_alu_out_16);
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		// Store rA to memory at address [rBp + rCp]
		pkg_instr_dec::instr_g3_op_strx:
		begin
			//prep_store_8( `get_final_ig3_reg_a, ( `get_final_ig3_rpair_b 
			//	+ `get_final_ig3_rpair_c ) );
			prep_store_8( `get_final_ig3_reg_a, `get_alu_out_16 );
			curr_state <= pkg_cpu::cpu_st_finish_exec_ldst_instr;
		end
		
		default:
		begin
			$display("Illegal Group 3 Instruction!");
		end
	endcase
	
	if (!final_ig3_instr_is_ldst)
	begin
		//start_exec_shared_non_ldst_suffix();
		prep_load_instr_hi_generic();
	end
	
endtask





`endif		// instr_g3_tasks_svinc
