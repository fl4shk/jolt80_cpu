// This file is part of Jolt80 CPU.
// 
// Copyright 2016 by Andrew Clark (FL4SHK).
// 
// Jolt80 CPU is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// Jolt80 CPU is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with Jolt80 CPU.  If not, see <http://www.gnu.org/licenses/>.

`ifndef alu_control_tasks_svinc
`define alu_control_tasks_svinc

task set_alu_dest_reg;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input op_affects_ra;
	
	//alu_a_in_lo <= all_regs[some_ra_index];
	alu_a_in_lo <= cpu_regs[some_ra_index];
	
	alu_dest_reg_index <= some_ra_index;
	alu_dest_reg_was_modded <= op_affects_ra;
endtask

task set_alu_dest_reg_pair;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input op_affects_rap;
	
	//{ alu_a_in_hi, alu_a_in_lo } <= `make_pair( temp_regs, 
	//	`make_reg_ind_from_pi(some_rap_index) );
	{ alu_a_in_hi, alu_a_in_lo } <= `make_reg_pair_w_pi(some_rap_index);
	
	alu_dest_rpair_index <= some_rap_index;
	alu_dest_rpair_was_modded <= op_affects_rap;
endtask

task set_alu_b_in_lo;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	alu_b_in_lo <= some_b_in_lo;
endtask

task set_alu_b_in_hi_and_lo;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_hi, some_b_in_lo;
	{ alu_b_in_hi, alu_b_in_lo } <= { some_b_in_hi, some_b_in_lo };
endtask


task set_alu_inputs_a8_b8;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	input op_affects_ra;
	
	set_alu_dest_reg( some_ra_index, op_affects_ra );
	set_alu_b_in_lo(some_b_in_lo);
endtask

task set_alu_inputs_a16_b8;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	input op_affects_rap;
	
	set_alu_dest_reg_pair( some_rap_index, op_affects_rap );
	set_alu_b_in_lo(some_b_in_lo);
endtask

//task set_alu_inputs_a8_b16;
//	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
//	input [`cpu_imm_value_8_msb_pos:0] some_b_in_hi, some_b_in_lo;
//	input op_affects_ra;
//	
//	set_alu_dest_reg( some_ra_index, op_affects_ra );
//	set_alu_b_in_hi_and_lo( some_b_in_hi, some_b_in_lo );
//endtask

task set_alu_inputs_a16_b16;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_hi, some_b_in_lo;
	input op_affects_rap;
	
	set_alu_dest_reg_pair( some_rap_index, op_affects_rap );
	set_alu_b_in_hi_and_lo( some_b_in_hi, some_b_in_lo );
endtask

task set_more_alu_config;
	input [`alu_op_msb_pos:0] some_alu_op;
	input op_affects_flags;
	
	// For Icarus Verilog, use the following line
	the_alu_op <= some_alu_op;
	
	// For Quartus II, use the following line
	//the_alu_op <= pkg_alu::alu_oper'(some_alu_op);
	
	
	alu_was_used <= 1;
	alu_proc_flags_in <= true_proc_flags;
	alu_modded_proc_flags <= op_affects_flags;
endtask



// Arithmetic operations
// Addition operations
task do_alu_op_add;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_add, 1 );
endtask

task do_alu_op_adc;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_adc, 1 );
endtask

task do_alu_op_addpb;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a16_b8( some_rap_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_addpb, 1 );
endtask

task do_alu_op_addp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_hi, some_b_in_lo;
	
	set_alu_inputs_a16_b16( some_rap_index, some_b_in_hi, some_b_in_lo, 
		1 );
	set_more_alu_config( pkg_alu::alu_op_addp, 1 );
endtask

task do_alu_op_addp_no_flags;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_hi, some_b_in_lo;
	
	set_alu_inputs_a16_b16( some_rap_index, some_b_in_hi, some_b_in_lo, 
		1 );
	set_more_alu_config( pkg_alu::alu_op_addp, 0 );
endtask

task do_alu_op_addpsnx_no_flags;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a16_b8( some_rap_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_addp, 0 );
endtask


// Subtraction operations
task do_alu_op_sub;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_sub, 1 );
endtask
task do_alu_op_sbc;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_sbc, 1 );
endtask
task do_alu_op_subpb;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a16_b8( some_rap_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_subpb, 1 );
endtask
task do_alu_op_subp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_hi, some_b_in_lo;
	
	set_alu_inputs_a16_b16( some_rap_index, some_b_in_hi, some_b_in_lo, 
		1 );
	set_more_alu_config( pkg_alu::alu_op_subp, 1 );
endtask
task do_alu_op_subp_no_flags;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_hi, some_b_in_lo;
	
	set_alu_inputs_a16_b16( some_rap_index, some_b_in_hi, some_b_in_lo, 
		1 );
	set_more_alu_config( pkg_alu::alu_op_subp, 0 );
endtask
task do_alu_op_cmp;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 0 );
	set_more_alu_config( pkg_alu::alu_op_sub, 1 );
endtask
task do_alu_op_cmpp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_hi, some_b_in_lo;
	
	set_alu_inputs_a16_b16( some_rap_index, some_b_in_hi, some_b_in_lo, 
		0 );
	set_more_alu_config( pkg_alu::alu_op_subp, 1 );
endtask

// Bitwise operations

// Operations analogous to logic gates (none of these affect carry)
task do_alu_op_and;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_and, 1 );
endtask
task do_alu_op_orr;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_orr, 1 );
endtask
task do_alu_op_xor;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_xor, 1 );
endtask

// Complement operations
task do_alu_op_inv;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	
	set_alu_dest_reg( some_ra_index, 1 );
	set_more_alu_config( pkg_alu::alu_op_inv, 1 );
endtask
task do_alu_op_invp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	
	set_alu_dest_reg_pair( some_rap_index, 1 );
	set_more_alu_config( pkg_alu::alu_op_invp, 1 );
endtask
task do_alu_op_neg;
	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
	
	set_alu_dest_reg( some_ra_index, 1 );
	set_more_alu_config( pkg_alu::alu_op_neg, 1 );
endtask
task do_alu_op_negp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	
	set_alu_dest_reg_pair( some_rap_index, 1 );
	set_more_alu_config( pkg_alu::alu_op_negp, 1 );
endtask



//// 8-bit Bitshifting operations (number of bits specified by b_in_lo)
//task do_alu_op_lsl;
//	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
//	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
//	
//	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
//	set_more_alu_config( pkg_alu::alu_op_lsl, 1 );
//endtask
//task do_alu_op_lsr;
//	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
//	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
//	
//	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
//	set_more_alu_config( pkg_alu::alu_op_lsr, 1 );
//endtask
//task do_alu_op_asr;
//	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
//	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
//	
//	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
//	set_more_alu_config( pkg_alu::alu_op_asr, 1 );
//endtask
//
//// 8-bit Bit rotation operations (number of bits specified by
//// [b_in_lo % inout_width])
//task do_alu_op_rol;
//	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
//	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
//	
//	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
//	set_more_alu_config( pkg_alu::alu_op_rol, 1 );
//endtask
//task do_alu_op_ror;
//	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
//	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
//	
//	set_alu_inputs_a8_b8( some_ra_index, some_b_in_lo, 1 );
//	set_more_alu_config( pkg_alu::alu_op_ror, 1 );
//endtask
//
//// Bit rotating instructions that use carry as bit 8 for a 9-bit
//// rotate of { carry, a_in_lo } by one bit:
//task do_alu_op_rolc;
//	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
//	
//	set_alu_dest_reg( some_ra_index, 1 );
//	set_more_alu_config( pkg_alu::alu_op_rolc, 1 );
//endtask
//task do_alu_op_rorc;
//	input [`cpu_reg_arr_msb_pos:0] some_ra_index;
//	
//	set_alu_dest_reg( some_ra_index, 1 );
//	set_more_alu_config( pkg_alu::alu_op_rorc, 1 );
//endtask



// 16-bit Bitshifting operations that shift { a_in_hi, a_in_lo }
// by b_in_lo bits
task do_alu_op_lslp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a16_b8( some_rap_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_lslp, 1 );
endtask
task do_alu_op_lsrp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a16_b8( some_rap_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_lsrp, 1 );
endtask
task do_alu_op_asrp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a16_b8( some_rap_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_asrp, 1 );
endtask

// 16-bit Bit rotation operations that rotate { a_in_hi, a_in_lo }
// by [b_in_lo % inout_width] bits
task do_alu_op_rolp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a16_b8( some_rap_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_rolp, 1 );
endtask
task do_alu_op_rorp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	input [`cpu_imm_value_8_msb_pos:0] some_b_in_lo;
	
	set_alu_inputs_a16_b8( some_rap_index, some_b_in_lo, 1 );
	set_more_alu_config( pkg_alu::alu_op_rorp, 1 );
endtask


// Bit rotating instructions that use carry as bit 16 for a 17-bit
// rotate of { carry, a_in_hi, a_in_lo } by one bit:
task do_alu_op_rolcp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	
	set_alu_dest_reg_pair( some_rap_index, 1 );
	set_more_alu_config( pkg_alu::alu_op_rolcp, 1 );
endtask
task do_alu_op_rorcp;
	input [`cpu_reg_arr_msb_pos:0] some_rap_index;
	
	set_alu_dest_reg_pair( some_rap_index, 1 );
	set_more_alu_config( pkg_alu::alu_op_rorcp, 1 );
endtask





// This task uses (non-final_) igX_... and treats temp_data_in as instr_hi

task prep_alu_if_needed_init;
	
	
	if ( init_instr_grp == pkg_instr_dec::instr_grp_1 )
	begin
		prep_alu_instr_grp_1_generic( ig1_opcode, ig1_ra_index, 
			ig1_imm_value_8 );
	end
	
	else if ( init_instr_grp == pkg_instr_dec::instr_grp_2 )
	begin
		prep_alu_instr_grp_2_generic( ig2_opcode, ig2_ra_index, 
			ig2_rb_index, ig2_ra_index_is_for_pair, 
			ig2_rb_index_is_for_pair );
	end
	
	else if ( init_instr_grp == pkg_instr_dec::instr_grp_3 )
	begin
		prep_alu_instr_grp_3_generic( ig3_opcode, ig3_ra_index, 
			ig3_rbp_index, ig3_rcp_index );
	end
	
	else if ( init_instr_grp == pkg_instr_dec::instr_grp_4 )
	begin
		prep_alu_instr_grp_4_generic( ig4_opcode, ig4_imm_value_8 );
	end
	
	else if ( init_instr_grp == pkg_instr_dec::instr_grp_5 )
	begin
		// This should really never happen
		$display( "WARNING:  prep_alu_if_needed_init() was used with a ",
			"group 5 instruction!" );
		prep_alu_instr_grp_5_generic( ig5_opcode, ig5_ra_index, 
			ig5_rbp_index, ig5_ra_index_is_for_pair, 0 );
	end
	
	
	else // if ( init_instr_grp == pkg_instr_dec::instr_grp_unknown )
	begin
		
	end
	
endtask



// This task uses final_igX_... and treats temp_data_in as instr_lo
task prep_alu_if_needed_final;
	
	
	if ( final_instr_grp == pkg_instr_dec::instr_grp_1 )
	begin
		$display( "WARNING:  prep_alu_if_needed_final() was used with a ",
			"group 1 instruction!" );
		prep_alu_instr_grp_1_generic( final_ig1_opcode, final_ig1_ra_index, 
			final_ig1_imm_value_8 );
	end
	
	else if ( final_instr_grp == pkg_instr_dec::instr_grp_2 )
	begin
		$display( "WARNING:  prep_alu_if_needed_final() was used with a ",
			"group 2 instruction!" );
		prep_alu_instr_grp_2_generic( final_ig2_opcode, final_ig2_ra_index, 
			final_ig2_rb_index, final_ig2_ra_index_is_for_pair, 
			final_ig2_rb_index_is_for_pair );
	end
	
	else if ( final_instr_grp == pkg_instr_dec::instr_grp_3 )
	begin
		$display( "WARNING:  prep_alu_if_needed_final() was used with a ",
			"group 3 instruction!" );
		prep_alu_instr_grp_3_generic( final_ig3_opcode, final_ig3_ra_index, 
			final_ig3_rbp_index, final_ig3_rcp_index );
	end
	
	else if ( final_instr_grp == pkg_instr_dec::instr_grp_4 )
	begin
		$display( "WARNING:  prep_alu_if_needed_final() was used with a ",
			"group 4 instruction!" );
		prep_alu_instr_grp_4_generic( final_ig4_opcode, 
			final_ig4_imm_value_8 );
	end
	
	else if ( final_instr_grp == pkg_instr_dec::instr_grp_5 )
	begin
		prep_alu_instr_grp_5_generic( final_ig5_opcode, final_ig5_ra_index, 
			final_ig5_rbp_index, final_ig5_ra_index_is_for_pair,
			temp_data_in );
	end
	
	
	else // if ( final_instr_grp == pkg_instr_dec::instr_grp_unknown )
	begin
		
	end
	
endtask


`endif		// alu_control_tasks_svinc
